
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00002d48  00002ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800110  00800110  00002e8c  2**0
                  ALLOC
  3 .stab         000029dc  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012dc  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__vector_6>
      1c:	0c 94 45 13 	jmp	0x268a	; 0x268a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 07 	call	0xf24	; 0xf24 <main>
      8a:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_edgeProcessing>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void HMI_edgeProcessing(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_secs_count++;
     b4e:	80 91 10 01 	lds	r24, 0x0110
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 10 01 	sts	0x0110, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <buzzer_act>:

void buzzer_act(uint8 t){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
     b6a:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
	LCD_displayString("THIEF!!!");
     b6e:	80 e6       	ldi	r24, 0x60	; 96
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
	Timer1_setCallBack(HMI_edgeProcessing);
     b76:	83 ea       	ldi	r24, 0xA3	; 163
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_setCallBack>
	while(g_secs_count<BUZZER_TIME*2);
     b7e:	80 91 10 01 	lds	r24, 0x0110
     b82:	88 37       	cpi	r24, 0x78	; 120
     b84:	e0 f3       	brcs	.-8      	; 0xb7e <buzzer_act+0x20>
	g_secs_count=0;
     b86:	10 92 10 01 	sts	0x0110, r1
}
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <sendPassword>:

void sendPassword(uint8 *password){
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <sendPassword+0x6>
     b98:	0f 92       	push	r0
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     ba2:	19 82       	std	Y+1, r1	; 0x01
     ba4:	0e c0       	rjmp	.+28     	; 0xbc2 <sendPassword+0x30>
	while(password[i]!=13){
		UART_sendByte(password[i]);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	9b 81       	ldd	r25, Y+3	; 0x03
     bb0:	fc 01       	movw	r30, r24
     bb2:	e2 0f       	add	r30, r18
     bb4:	f3 1f       	adc	r31, r19
     bb6:	80 81       	ld	r24, Z
     bb8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
		i++;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	89 83       	std	Y+1, r24	; 0x01
	g_secs_count=0;
}

void sendPassword(uint8 *password){
	uint8 i=0;
	while(password[i]!=13){
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	9b 81       	ldd	r25, Y+3	; 0x03
     bcc:	fc 01       	movw	r30, r24
     bce:	e2 0f       	add	r30, r18
     bd0:	f3 1f       	adc	r31, r19
     bd2:	80 81       	ld	r24, Z
     bd4:	8d 30       	cpi	r24, 0x0D	; 13
     bd6:	39 f7       	brne	.-50     	; 0xba6 <sendPassword+0x14>
		UART_sendByte(password[i]);
		i++;
	}
	UART_sendByte(password[i]);
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	fc 01       	movw	r30, r24
     be4:	e2 0f       	add	r30, r18
     be6:	f3 1f       	adc	r31, r19
     be8:	80 81       	ld	r24, Z
     bea:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <getPassword>:

void getPassword(uint8 * password){
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	a0 97       	sbiw	r28, 0x20	; 32
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	98 a3       	std	Y+32, r25	; 0x20
     c10:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i=0,key;
     c12:	1e 8e       	std	Y+30, r1	; 0x1e
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	a8 ec       	ldi	r26, 0xC8	; 200
     c1a:	b2 e4       	ldi	r27, 0x42	; 66
     c1c:	89 8f       	std	Y+25, r24	; 0x19
     c1e:	9a 8f       	std	Y+26, r25	; 0x1a
     c20:	ab 8f       	std	Y+27, r26	; 0x1b
     c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c24:	69 8d       	ldd	r22, Y+25	; 0x19
     c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a e7       	ldi	r20, 0x7A	; 122
     c32:	53 e4       	ldi	r21, 0x43	; 67
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8d 8b       	std	Y+21, r24	; 0x15
     c3e:	9e 8b       	std	Y+22, r25	; 0x16
     c40:	af 8b       	std	Y+23, r26	; 0x17
     c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c44:	6d 89       	ldd	r22, Y+21	; 0x15
     c46:	7e 89       	ldd	r23, Y+22	; 0x16
     c48:	8f 89       	ldd	r24, Y+23	; 0x17
     c4a:	98 8d       	ldd	r25, Y+24	; 0x18
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <getPassword+0x6c>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9c 8b       	std	Y+20, r25	; 0x14
     c62:	8b 8b       	std	Y+19, r24	; 0x13
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <getPassword+0xea>
	else if (__tmp > 65535)
     c66:	6d 89       	ldd	r22, Y+21	; 0x15
     c68:	7e 89       	ldd	r23, Y+22	; 0x16
     c6a:	8f 89       	ldd	r24, Y+23	; 0x17
     c6c:	98 8d       	ldd	r25, Y+24	; 0x18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	4f e7       	ldi	r20, 0x7F	; 127
     c74:	57 e4       	ldi	r21, 0x47	; 71
     c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	4c f5       	brge	.+82     	; 0xcd0 <getPassword+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7e:	69 8d       	ldd	r22, Y+25	; 0x19
     c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9c 8b       	std	Y+20, r25	; 0x14
     ca4:	8b 8b       	std	Y+19, r24	; 0x13
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <getPassword+0xcc>
     ca8:	89 e1       	ldi	r24, 0x19	; 25
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 8b       	std	Y+18, r25	; 0x12
     cae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb0:	89 89       	ldd	r24, Y+17	; 0x11
     cb2:	9a 89       	ldd	r25, Y+18	; 0x12
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <getPassword+0xba>
     cb8:	9a 8b       	std	Y+18, r25	; 0x12
     cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbc:	8b 89       	ldd	r24, Y+19	; 0x13
     cbe:	9c 89       	ldd	r25, Y+20	; 0x14
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9c 8b       	std	Y+20, r25	; 0x14
     cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	9c 89       	ldd	r25, Y+20	; 0x14
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	69 f7       	brne	.-38     	; 0xca8 <getPassword+0xae>
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <getPassword+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd0:	6d 89       	ldd	r22, Y+21	; 0x15
     cd2:	7e 89       	ldd	r23, Y+22	; 0x16
     cd4:	8f 89       	ldd	r24, Y+23	; 0x17
     cd6:	98 8d       	ldd	r25, Y+24	; 0x18
     cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	8b 8b       	std	Y+19, r24	; 0x13
     ce4:	8b 89       	ldd	r24, Y+19	; 0x13
     ce6:	9c 89       	ldd	r25, Y+20	; 0x14
     ce8:	98 8b       	std	Y+16, r25	; 0x10
     cea:	8f 87       	std	Y+15, r24	; 0x0f
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	98 89       	ldd	r25, Y+16	; 0x10
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <getPassword+0xf6>
     cf4:	98 8b       	std	Y+16, r25	; 0x10
     cf6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	key=KEYPAD_getPressedKey();
     cf8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <KEYPAD_getPressedKey>
     cfc:	8d 8f       	std	Y+29, r24	; 0x1d
     cfe:	86 c0       	rjmp	.+268    	; 0xe0c <getPassword+0x212>
	while(key!=13){
		password[i]=key;
     d00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d08:	98 a1       	ldd	r25, Y+32	; 0x20
     d0a:	fc 01       	movw	r30, r24
     d0c:	e2 0f       	add	r30, r18
     d0e:	f3 1f       	adc	r31, r19
     d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d12:	80 83       	st	Z, r24
		i++;
     d14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_displayString("*");
     d1a:	89 e6       	ldi	r24, 0x69	; 105
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	aa ef       	ldi	r26, 0xFA	; 250
     d28:	b3 e4       	ldi	r27, 0x43	; 67
     d2a:	8b 87       	std	Y+11, r24	; 0x0b
     d2c:	9c 87       	std	Y+12, r25	; 0x0c
     d2e:	ad 87       	std	Y+13, r26	; 0x0d
     d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d32:	6b 85       	ldd	r22, Y+11	; 0x0b
     d34:	7c 85       	ldd	r23, Y+12	; 0x0c
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	4a e7       	ldi	r20, 0x7A	; 122
     d40:	53 e4       	ldi	r21, 0x43	; 67
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8f 83       	std	Y+7, r24	; 0x07
     d4c:	98 87       	std	Y+8, r25	; 0x08
     d4e:	a9 87       	std	Y+9, r26	; 0x09
     d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d52:	6f 81       	ldd	r22, Y+7	; 0x07
     d54:	78 85       	ldd	r23, Y+8	; 0x08
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d66:	88 23       	and	r24, r24
     d68:	2c f4       	brge	.+10     	; 0xd74 <getPassword+0x17a>
		__ticks = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <getPassword+0x1f8>
	else if (__tmp > 65535)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	3f ef       	ldi	r19, 0xFF	; 255
     d80:	4f e7       	ldi	r20, 0x7F	; 127
     d82:	57 e4       	ldi	r21, 0x47	; 71
     d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d88:	18 16       	cp	r1, r24
     d8a:	4c f5       	brge	.+82     	; 0xdde <getPassword+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d90:	8d 85       	ldd	r24, Y+13	; 0x0d
     d92:	9e 85       	ldd	r25, Y+14	; 0x0e
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e2       	ldi	r20, 0x20	; 32
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9e 83       	std	Y+6, r25	; 0x06
     db2:	8d 83       	std	Y+5, r24	; 0x05
     db4:	0f c0       	rjmp	.+30     	; 0xdd4 <getPassword+0x1da>
     db6:	89 e1       	ldi	r24, 0x19	; 25
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <getPassword+0x1c8>
     dc6:	9c 83       	std	Y+4, r25	; 0x04
     dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	9e 83       	std	Y+6, r25	; 0x06
     dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f7       	brne	.-38     	; 0xdb6 <getPassword+0x1bc>
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <getPassword+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dde:	6f 81       	ldd	r22, Y+7	; 0x07
     de0:	78 85       	ldd	r23, Y+8	; 0x08
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <getPassword+0x204>
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		key=KEYPAD_getPressedKey();
     e06:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <KEYPAD_getPressedKey>
     e0a:	8d 8f       	std	Y+29, r24	; 0x1d

void getPassword(uint8 * password){
	uint8 i=0,key;
	_delay_ms(100);
	key=KEYPAD_getPressedKey();
	while(key!=13){
     e0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e0e:	8d 30       	cpi	r24, 0x0D	; 13
     e10:	09 f0       	breq	.+2      	; 0xe14 <getPassword+0x21a>
     e12:	76 cf       	rjmp	.-276    	; 0xd00 <getPassword+0x106>
		i++;
		LCD_displayString("*");
		_delay_ms(500);
		key=KEYPAD_getPressedKey();
	}
	password[i]=key;
     e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e1c:	98 a1       	ldd	r25, Y+32	; 0x20
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e26:	80 83       	st	Z, r24
}
     e28:	a0 96       	adiw	r28, 0x20	; 32
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <motor_act>:

void motor_act(uint8 act){
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <motor_act+0x6>
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(act);
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
	switch(act){
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3b 83       	std	Y+3, r19	; 0x03
     e56:	2a 83       	std	Y+2, r18	; 0x02
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	91 05       	cpc	r25, r1
     e60:	19 f1       	breq	.+70     	; 0xea8 <motor_act+0x6e>
     e62:	2a 81       	ldd	r18, Y+2	; 0x02
     e64:	3b 81       	ldd	r19, Y+3	; 0x03
     e66:	25 30       	cpi	r18, 0x05	; 5
     e68:	31 05       	cpc	r19, r1
     e6a:	b1 f1       	breq	.+108    	; 0xed8 <motor_act+0x9e>
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	91 05       	cpc	r25, r1
     e74:	09 f0       	breq	.+2      	; 0xe78 <motor_act+0x3e>
     e76:	47 c0       	rjmp	.+142    	; 0xf06 <motor_act+0xcc>
	case DC_MOTOR_ACT1:
		LCD_clearScreen();
     e78:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
		LCD_displayString("Door is");
     e7c:	8b e6       	ldi	r24, 0x6B	; 107
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Unlocking");
     e84:	23 e7       	ldi	r18, 0x73	; 115
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	a9 01       	movw	r20, r18
     e8e:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayStringRowColumn>
		Timer1_setCallBack(HMI_edgeProcessing);
     e92:	83 ea       	ldi	r24, 0xA3	; 163
     e94:	95 e0       	ldi	r25, 0x05	; 5
     e96:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_setCallBack>
		while(g_secs_count<DOOR_UNLOCKING*2);
     e9a:	80 91 10 01 	lds	r24, 0x0110
     e9e:	8e 31       	cpi	r24, 0x1E	; 30
     ea0:	e0 f3       	brcs	.-8      	; 0xe9a <motor_act+0x60>
		g_secs_count=0;
     ea2:	10 92 10 01 	sts	0x0110, r1
     ea6:	2f c0       	rjmp	.+94     	; 0xf06 <motor_act+0xcc>
		break;
	case DC_MOTOR_ACT2:
		LCD_clearScreen();
     ea8:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
		LCD_displayString("Door is");
     eac:	8b e6       	ldi	r24, 0x6B	; 107
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Unlocked");
     eb4:	2d e7       	ldi	r18, 0x7D	; 125
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayStringRowColumn>
		Timer1_setCallBack(HMI_edgeProcessing);
     ec2:	83 ea       	ldi	r24, 0xA3	; 163
     ec4:	95 e0       	ldi	r25, 0x05	; 5
     ec6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_setCallBack>
		while(g_secs_count<DOOR_HOLD*2);
     eca:	80 91 10 01 	lds	r24, 0x0110
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	e0 f3       	brcs	.-8      	; 0xeca <motor_act+0x90>
		g_secs_count=0;
     ed2:	10 92 10 01 	sts	0x0110, r1
     ed6:	17 c0       	rjmp	.+46     	; 0xf06 <motor_act+0xcc>
		break;
	case DC_MOTOR_ACT3:
		LCD_clearScreen();
     ed8:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
		LCD_displayString("Door is");
     edc:	8b e6       	ldi	r24, 0x6B	; 107
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Locking");
     ee4:	26 e8       	ldi	r18, 0x86	; 134
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayStringRowColumn>
		Timer1_setCallBack(HMI_edgeProcessing);
     ef2:	83 ea       	ldi	r24, 0xA3	; 163
     ef4:	95 e0       	ldi	r25, 0x05	; 5
     ef6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_setCallBack>
		while(g_secs_count<DOOR_LOCKING*2);
     efa:	80 91 10 01 	lds	r24, 0x0110
     efe:	8e 31       	cpi	r24, 0x1E	; 30
     f00:	e0 f3       	brcs	.-8      	; 0xefa <motor_act+0xc0>
		g_secs_count=0;
     f02:	10 92 10 01 	sts	0x0110, r1
		break;
	}
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <enter_opt>:

uint8 enter_opt(){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	return KEYPAD_getPressedKey();
     f1a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <KEYPAD_getPressedKey>
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <main>:

void main(void){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	ed 97       	sbiw	r28, 0x3d	; 61
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61

	uint8 state_sys=FIRST_PASS, check, state, opt_forsa=0, password[PASS_SIZE];
     f38:	1a 8a       	std	Y+18, r1	; 0x12
     f3a:	1f 86       	std	Y+15, r1	; 0x0f

	UART_ConfigType HMI_UART_Config={BIT_8, PARITY_DISABLED, STOP_ONE, 9600};
     f3c:	9e 01       	movw	r18, r28
     f3e:	23 5e       	subi	r18, 0xE3	; 227
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	3d ab       	std	Y+53, r19	; 0x35
     f44:	2c ab       	std	Y+52, r18	; 0x34
     f46:	88 e0       	ldi	r24, 0x08	; 8
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	9f ab       	std	Y+55, r25	; 0x37
     f4c:	8e ab       	std	Y+54, r24	; 0x36
     f4e:	97 e0       	ldi	r25, 0x07	; 7
     f50:	98 af       	std	Y+56, r25	; 0x38
     f52:	ee a9       	ldd	r30, Y+54	; 0x36
     f54:	ff a9       	ldd	r31, Y+55	; 0x37
     f56:	00 80       	ld	r0, Z
     f58:	2e a9       	ldd	r18, Y+54	; 0x36
     f5a:	3f a9       	ldd	r19, Y+55	; 0x37
     f5c:	2f 5f       	subi	r18, 0xFF	; 255
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	3f ab       	std	Y+55, r19	; 0x37
     f62:	2e ab       	std	Y+54, r18	; 0x36
     f64:	ec a9       	ldd	r30, Y+52	; 0x34
     f66:	fd a9       	ldd	r31, Y+53	; 0x35
     f68:	00 82       	st	Z, r0
     f6a:	2c a9       	ldd	r18, Y+52	; 0x34
     f6c:	3d a9       	ldd	r19, Y+53	; 0x35
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	3d ab       	std	Y+53, r19	; 0x35
     f74:	2c ab       	std	Y+52, r18	; 0x34
     f76:	38 ad       	ldd	r19, Y+56	; 0x38
     f78:	31 50       	subi	r19, 0x01	; 1
     f7a:	38 af       	std	Y+56, r19	; 0x38
     f7c:	88 ad       	ldd	r24, Y+56	; 0x38
     f7e:	88 23       	and	r24, r24
     f80:	41 f7       	brne	.-48     	; 0xf52 <main+0x2e>
	Timer1_ConfigType HMI_Timer1_Config={INITIAL_ZERO, NOT_COMPARE_VALUE, F_CPU_8, NORMAL};
     f82:	fe 01       	movw	r30, r28
     f84:	b4 96       	adiw	r30, 0x24	; 36
     f86:	fa af       	std	Y+58, r31	; 0x3a
     f88:	e9 af       	std	Y+57, r30	; 0x39
     f8a:	22 e0       	ldi	r18, 0x02	; 2
     f8c:	31 e0       	ldi	r19, 0x01	; 1
     f8e:	3c af       	std	Y+60, r19	; 0x3c
     f90:	2b af       	std	Y+59, r18	; 0x3b
     f92:	36 e0       	ldi	r19, 0x06	; 6
     f94:	3d af       	std	Y+61, r19	; 0x3d
     f96:	eb ad       	ldd	r30, Y+59	; 0x3b
     f98:	fc ad       	ldd	r31, Y+60	; 0x3c
     f9a:	00 80       	ld	r0, Z
     f9c:	2b ad       	ldd	r18, Y+59	; 0x3b
     f9e:	3c ad       	ldd	r19, Y+60	; 0x3c
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	3c af       	std	Y+60, r19	; 0x3c
     fa6:	2b af       	std	Y+59, r18	; 0x3b
     fa8:	e9 ad       	ldd	r30, Y+57	; 0x39
     faa:	fa ad       	ldd	r31, Y+58	; 0x3a
     fac:	00 82       	st	Z, r0
     fae:	29 ad       	ldd	r18, Y+57	; 0x39
     fb0:	3a ad       	ldd	r19, Y+58	; 0x3a
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	3a af       	std	Y+58, r19	; 0x3a
     fb8:	29 af       	std	Y+57, r18	; 0x39
     fba:	3d ad       	ldd	r19, Y+61	; 0x3d
     fbc:	31 50       	subi	r19, 0x01	; 1
     fbe:	3d af       	std	Y+61, r19	; 0x3d
     fc0:	8d ad       	ldd	r24, Y+61	; 0x3d
     fc2:	88 23       	and	r24, r24
     fc4:	41 f7       	brne	.-48     	; 0xf96 <main+0x72>

	SET_BIT(SREG, 7);
     fc6:	af e5       	ldi	r26, 0x5F	; 95
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ef e5       	ldi	r30, 0x5F	; 95
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	8c 93       	st	X, r24

	LCD_init();
     fd4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_init>
	UART_init(&HMI_UART_Config);
     fd8:	ce 01       	movw	r24, r28
     fda:	4d 96       	adiw	r24, 0x1d	; 29
     fdc:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_init>
	Timer1_init(&HMI_Timer1_Config);
     fe0:	ce 01       	movw	r24, r28
     fe2:	84 96       	adiw	r24, 0x24	; 36
     fe4:	0e 94 ab 13 	call	0x2756	; 0x2756 <Timer1_init>

	while(1){
		switch(state_sys){
     fe8:	8a 89       	ldd	r24, Y+18	; 0x12
     fea:	e8 2f       	mov	r30, r24
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	fb ab       	std	Y+51, r31	; 0x33
     ff0:	ea ab       	std	Y+50, r30	; 0x32
     ff2:	2a a9       	ldd	r18, Y+50	; 0x32
     ff4:	3b a9       	ldd	r19, Y+51	; 0x33
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <main+0xda>
     ffc:	e3 c0       	rjmp	.+454    	; 0x11c4 <main+0x2a0>
     ffe:	8a a9       	ldd	r24, Y+50	; 0x32
    1000:	9b a9       	ldd	r25, Y+51	; 0x33
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	54 f4       	brge	.+20     	; 0x101c <main+0xf8>
    1008:	ea a9       	ldd	r30, Y+50	; 0x32
    100a:	fb a9       	ldd	r31, Y+51	; 0x33
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	99 f0       	breq	.+38     	; 0x1036 <main+0x112>
    1010:	2a a9       	ldd	r18, Y+50	; 0x32
    1012:	3b a9       	ldd	r19, Y+51	; 0x33
    1014:	21 30       	cpi	r18, 0x01	; 1
    1016:	31 05       	cpc	r19, r1
    1018:	31 f1       	breq	.+76     	; 0x1066 <main+0x142>
    101a:	e6 cf       	rjmp	.-52     	; 0xfe8 <main+0xc4>
    101c:	8a a9       	ldd	r24, Y+50	; 0x32
    101e:	9b a9       	ldd	r25, Y+51	; 0x33
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x104>
    1026:	f4 c0       	rjmp	.+488    	; 0x1210 <main+0x2ec>
    1028:	ea a9       	ldd	r30, Y+50	; 0x32
    102a:	fb a9       	ldd	r31, Y+51	; 0x33
    102c:	e4 30       	cpi	r30, 0x04	; 4
    102e:	f1 05       	cpc	r31, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <main+0x110>
    1032:	42 c1       	rjmp	.+644    	; 0x12b8 <main+0x394>
    1034:	d9 cf       	rjmp	.-78     	; 0xfe8 <main+0xc4>
		case FIRST_PASS:
			UART_sendByte(WRITE_PASS);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
			LCD_clearScreen();
    103c:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    1040:	8e e8       	ldi	r24, 0x8E	; 142
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
			LCD_moveCursor(1,0);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_moveCursor>
			getPassword(password);
    1050:	ce 01       	movw	r24, r28
    1052:	43 96       	adiw	r24, 0x13	; 19
    1054:	0e 94 fd 05 	call	0xbfa	; 0xbfa <getPassword>
			sendPassword(password);
    1058:	ce 01       	movw	r24, r28
    105a:	43 96       	adiw	r24, 0x13	; 19
    105c:	0e 94 c9 05 	call	0xb92	; 0xb92 <sendPassword>
			state_sys=SECOND_PASS;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8a 8b       	std	Y+18, r24	; 0x12
    1064:	c1 cf       	rjmp	.-126    	; 0xfe8 <main+0xc4>
			break;
		case SECOND_PASS:
			LCD_clearScreen();
    1066:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    106a:	8e e9       	ldi	r24, 0x9E	; 158
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same pass:");
    1072:	2f ea       	ldi	r18, 0xAF	; 175
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayStringRowColumn>
			getPassword(password);
    1080:	ce 01       	movw	r24, r28
    1082:	43 96       	adiw	r24, 0x13	; 19
    1084:	0e 94 fd 05 	call	0xbfa	; 0xbfa <getPassword>
			sendPassword(password);
    1088:	ce 01       	movw	r24, r28
    108a:	43 96       	adiw	r24, 0x13	; 19
    108c:	0e 94 c9 05 	call	0xb92	; 0xb92 <sendPassword>
			LCD_clearScreen();
    1090:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
			LCD_displayString("Loading...");
    1094:	8a eb       	ldi	r24, 0xBA	; 186
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
			check=UART_recieveByte();
    109c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    10a0:	89 8b       	std	Y+17, r24	; 0x11
			switch(check){
    10a2:	89 89       	ldd	r24, Y+17	; 0x11
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	39 ab       	std	Y+49, r19	; 0x31
    10aa:	28 ab       	std	Y+48, r18	; 0x30
    10ac:	88 a9       	ldd	r24, Y+48	; 0x30
    10ae:	99 a9       	ldd	r25, Y+49	; 0x31
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <main+0x1ac>
    10b4:	e8 a9       	ldd	r30, Y+48	; 0x30
    10b6:	f9 a9       	ldd	r31, Y+49	; 0x31
    10b8:	e1 30       	cpi	r30, 0x01	; 1
    10ba:	f1 05       	cpc	r31, r1
    10bc:	81 f4       	brne	.+32     	; 0x10de <main+0x1ba>
			case SUCCESS:
				LCD_clearScreen();
    10be:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
				LCD_displayString("Pass success");
    10c2:	85 ec       	ldi	r24, 0xC5	; 197
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
				state_sys=MAIN_OPTIONS;
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	8a 8b       	std	Y+18, r24	; 0x12
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <main+0x1ba>
				break;
			case FAILURE:
				LCD_clearScreen();
    10d0:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
				LCD_displayString("Pass fail");
    10d4:	82 ed       	ldi	r24, 0xD2	; 210
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
				state_sys=FIRST_PASS;
    10dc:	1a 8a       	std	Y+18, r1	; 0x12
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	aa e7       	ldi	r26, 0x7A	; 122
    10e4:	b3 e4       	ldi	r27, 0x43	; 67
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	ad 87       	std	Y+13, r26	; 0x0d
    10ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	53 e4       	ldi	r21, 0x43	; 67
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
    110a:	a9 87       	std	Y+9, r26	; 0x09
    110c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <main+0x20c>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <main+0x28a>
	else if (__tmp > 65535)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <main+0x26c>
    1172:	89 e1       	ldi	r24, 0x19	; 25
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <main+0x25a>
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <main+0x24e>
    1198:	27 cf       	rjmp	.-434    	; 0xfe8 <main+0xc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <main+0x296>
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	12 cf       	rjmp	.-476    	; 0xfe8 <main+0xc4>
				break;
			}
			_delay_ms(250);
			break;
		case MAIN_OPTIONS:
			LCD_clearScreen();
    11c4:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    11c8:	8c ed       	ldi	r24, 0xDC	; 220
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    11d0:	2a ee       	ldi	r18, 0xEA	; 234
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayStringRowColumn>
			state=KEYPAD_getPressedKey();
    11de:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <KEYPAD_getPressedKey>
    11e2:	88 8b       	std	Y+16, r24	; 0x10
			switch(state){
    11e4:	88 89       	ldd	r24, Y+16	; 0x10
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3f a7       	std	Y+47, r19	; 0x2f
    11ec:	2e a7       	std	Y+46, r18	; 0x2e
    11ee:	8e a5       	ldd	r24, Y+46	; 0x2e
    11f0:	9f a5       	ldd	r25, Y+47	; 0x2f
    11f2:	8b 32       	cpi	r24, 0x2B	; 43
    11f4:	91 05       	cpc	r25, r1
    11f6:	31 f0       	breq	.+12     	; 0x1204 <main+0x2e0>
    11f8:	ee a5       	ldd	r30, Y+46	; 0x2e
    11fa:	ff a5       	ldd	r31, Y+47	; 0x2f
    11fc:	ed 32       	cpi	r30, 0x2D	; 45
    11fe:	f1 05       	cpc	r31, r1
    1200:	21 f0       	breq	.+8      	; 0x120a <main+0x2e6>
    1202:	f2 ce       	rjmp	.-540    	; 0xfe8 <main+0xc4>
			case '+':
				state_sys=OPEN_DOOR;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	8a 8b       	std	Y+18, r24	; 0x12
    1208:	ef ce       	rjmp	.-546    	; 0xfe8 <main+0xc4>
				break;
			case '-':
				state_sys=CHANGE_PASS;
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	8a 8b       	std	Y+18, r24	; 0x12
    120e:	ec ce       	rjmp	.-552    	; 0xfe8 <main+0xc4>
			default:
				break;
			}
			break;
		case OPEN_DOOR:
				UART_sendByte(CHECK_PASS);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
				LCD_clearScreen();
    1216:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
				LCD_displayString("Plz enter pass:");
    121a:	8e e8       	ldi	r24, 0x8E	; 142
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
				LCD_moveCursor(1,0);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_moveCursor>
				getPassword(password);
    122a:	ce 01       	movw	r24, r28
    122c:	43 96       	adiw	r24, 0x13	; 19
    122e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <getPassword>
				sendPassword(password);
    1232:	ce 01       	movw	r24, r28
    1234:	43 96       	adiw	r24, 0x13	; 19
    1236:	0e 94 c9 05 	call	0xb92	; 0xb92 <sendPassword>
			check=UART_recieveByte();
    123a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    123e:	89 8b       	std	Y+17, r24	; 0x11
			switch(check){
    1240:	89 89       	ldd	r24, Y+17	; 0x11
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d a7       	std	Y+45, r19	; 0x2d
    1248:	2c a7       	std	Y+44, r18	; 0x2c
    124a:	8c a5       	ldd	r24, Y+44	; 0x2c
    124c:	9d a5       	ldd	r25, Y+45	; 0x2d
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	09 f1       	breq	.+66     	; 0x1294 <main+0x370>
    1252:	ec a5       	ldd	r30, Y+44	; 0x2c
    1254:	fd a5       	ldd	r31, Y+45	; 0x2d
    1256:	e1 30       	cpi	r30, 0x01	; 1
    1258:	f1 05       	cpc	r31, r1
    125a:	09 f0       	breq	.+2      	; 0x125e <main+0x33a>
    125c:	c5 ce       	rjmp	.-630    	; 0xfe8 <main+0xc4>
			case SUCCESS:
				UART_sendByte(DC_MOTOR_ACT1);
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
				motor_act(DC_MOTOR_ACT1);
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	0e 94 1d 07 	call	0xe3a	; 0xe3a <motor_act>
				UART_recieveByte();
    126a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
				UART_sendByte(DC_MOTOR_ACT2);
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
				motor_act(DC_MOTOR_ACT2);
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	0e 94 1d 07 	call	0xe3a	; 0xe3a <motor_act>
				UART_recieveByte();
    127a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
				UART_sendByte(DC_MOTOR_ACT3);
    127e:	85 e0       	ldi	r24, 0x05	; 5
    1280:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
				motor_act(DC_MOTOR_ACT3);
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	0e 94 1d 07 	call	0xe3a	; 0xe3a <motor_act>
				UART_recieveByte();
    128a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
				state_sys=MAIN_OPTIONS;
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	8a 8b       	std	Y+18, r24	; 0x12
    1292:	aa ce       	rjmp	.-684    	; 0xfe8 <main+0xc4>
				break;
			case FAILURE:
				opt_forsa++;
    1294:	8f 85       	ldd	r24, Y+15	; 0x0f
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	8f 87       	std	Y+15, r24	; 0x0f
				if(opt_forsa==3){
    129a:	8f 85       	ldd	r24, Y+15	; 0x0f
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	09 f0       	breq	.+2      	; 0x12a2 <main+0x37e>
    12a0:	a3 ce       	rjmp	.-698    	; 0xfe8 <main+0xc4>
					UART_sendByte(BUZZER_ACT);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
					buzzer_act(BUZZER_TIME);
    12a8:	8c e3       	ldi	r24, 0x3C	; 60
    12aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <buzzer_act>
					state_sys=MAIN_OPTIONS;
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	8a 8b       	std	Y+18, r24	; 0x12
					UART_recieveByte();
    12b2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    12b6:	98 ce       	rjmp	.-720    	; 0xfe8 <main+0xc4>
			default:
				break;
			}
			break;
		case CHANGE_PASS:
			UART_sendByte(CHECK_PASS);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
			LCD_clearScreen();
    12be:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    12c2:	8e e8       	ldi	r24, 0x8E	; 142
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
			LCD_moveCursor(1,0);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_moveCursor>
			getPassword(password);
    12d2:	ce 01       	movw	r24, r28
    12d4:	43 96       	adiw	r24, 0x13	; 19
    12d6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <getPassword>
			sendPassword(password);
    12da:	ce 01       	movw	r24, r28
    12dc:	43 96       	adiw	r24, 0x13	; 19
    12de:	0e 94 c9 05 	call	0xb92	; 0xb92 <sendPassword>
			check=UART_recieveByte();
    12e2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    12e6:	89 8b       	std	Y+17, r24	; 0x11
			switch(check){
    12e8:	89 89       	ldd	r24, Y+17	; 0x11
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3b a7       	std	Y+43, r19	; 0x2b
    12f0:	2a a7       	std	Y+42, r18	; 0x2a
    12f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    12f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	41 f0       	breq	.+16     	; 0x130a <main+0x3e6>
    12fa:	ea a5       	ldd	r30, Y+42	; 0x2a
    12fc:	fb a5       	ldd	r31, Y+43	; 0x2b
    12fe:	e1 30       	cpi	r30, 0x01	; 1
    1300:	f1 05       	cpc	r31, r1
    1302:	09 f0       	breq	.+2      	; 0x1306 <main+0x3e2>
    1304:	71 ce       	rjmp	.-798    	; 0xfe8 <main+0xc4>
			case SUCCESS:
				state_sys=FIRST_PASS;
    1306:	1a 8a       	std	Y+18, r1	; 0x12
    1308:	6f ce       	rjmp	.-802    	; 0xfe8 <main+0xc4>
				break;
			case FAILURE:
				opt_forsa++;
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	8f 87       	std	Y+15, r24	; 0x0f
				if(opt_forsa==3){
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	09 f0       	breq	.+2      	; 0x1318 <main+0x3f4>
    1316:	68 ce       	rjmp	.-816    	; 0xfe8 <main+0xc4>
					UART_sendByte(BUZZER_ACT);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
					LCD_clearScreen();
    131e:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_clearScreen>
					LCD_displayString("THIEF!!!");
    1322:	80 e6       	ldi	r24, 0x60	; 96
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
					state_sys=MAIN_OPTIONS;
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	8a 8b       	std	Y+18, r24	; 0x12
					UART_recieveByte();
    132e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    1332:	5a ce       	rjmp	.-844    	; 0xfe8 <main+0xc4>

00001334 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <GPIO_setupPinDirection+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_setupPinDirection+0x8>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	6a 83       	std	Y+2, r22	; 0x02
    1346:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	88 30       	cpi	r24, 0x08	; 8
    134c:	08 f0       	brcs	.+2      	; 0x1350 <GPIO_setupPinDirection+0x1c>
    134e:	d5 c0       	rjmp	.+426    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	08 f0       	brcs	.+2      	; 0x1358 <GPIO_setupPinDirection+0x24>
    1356:	d1 c0       	rjmp	.+418    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 83       	std	Y+5, r19	; 0x05
    1360:	2c 83       	std	Y+4, r18	; 0x04
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <GPIO_setupPinDirection+0x3a>
    136c:	43 c0       	rjmp	.+134    	; 0x13f4 <GPIO_setupPinDirection+0xc0>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <GPIO_setupPinDirection+0x4e>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	71 f0       	breq	.+28     	; 0x139c <GPIO_setupPinDirection+0x68>
    1380:	bc c0       	rjmp	.+376    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <GPIO_setupPinDirection+0x5a>
    138c:	5f c0       	rjmp	.+190    	; 0x144c <GPIO_setupPinDirection+0x118>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <GPIO_setupPinDirection+0x66>
    1398:	85 c0       	rjmp	.+266    	; 0x14a4 <GPIO_setupPinDirection+0x170>
    139a:	af c0       	rjmp	.+350    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13a2:	aa e3       	ldi	r26, 0x3A	; 58
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0x8c>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0x88>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	98 c0       	rjmp	.+304    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13ca:	aa e3       	ldi	r26, 0x3A	; 58
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ea e3       	ldi	r30, 0x3A	; 58
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0xb4>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0xb0>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	83 c0       	rjmp	.+262    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13fa:	a7 e3       	ldi	r26, 0x37	; 55
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e7 e3       	ldi	r30, 0x37	; 55
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_setupPinDirection+0xe4>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_setupPinDirection+0xe0>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	6c c0       	rjmp	.+216    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1422:	a7 e3       	ldi	r26, 0x37	; 55
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e7 e3       	ldi	r30, 0x37	; 55
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0x10c>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0x108>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	57 c0       	rjmp	.+174    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1452:	a4 e3       	ldi	r26, 0x34	; 52
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_setupPinDirection+0x13c>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_setupPinDirection+0x138>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	40 c0       	rjmp	.+128    	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    147a:	a4 e3       	ldi	r26, 0x34	; 52
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_setupPinDirection+0x164>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_setupPinDirection+0x160>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	2b c0       	rjmp	.+86     	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14aa:	a1 e3       	ldi	r26, 0x31	; 49
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e1 e3       	ldi	r30, 0x31	; 49
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_setupPinDirection+0x194>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_setupPinDirection+0x190>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	14 c0       	rjmp	.+40     	; 0x14fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14d2:	a1 e3       	ldi	r26, 0x31	; 49
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_setupPinDirection+0x1bc>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_setupPinDirection+0x1b8>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_writePin+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_writePin+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
    151c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	08 f0       	brcs	.+2      	; 0x1526 <GPIO_writePin+0x1c>
    1524:	d5 c0       	rjmp	.+426    	; 0x16d0 <GPIO_writePin+0x1c6>
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_writePin+0x24>
    152c:	d1 c0       	rjmp	.+418    	; 0x16d0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3d 83       	std	Y+5, r19	; 0x05
    1536:	2c 83       	std	Y+4, r18	; 0x04
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_writePin+0x3a>
    1542:	43 c0       	rjmp	.+134    	; 0x15ca <GPIO_writePin+0xc0>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <GPIO_writePin+0x4e>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	71 f0       	breq	.+28     	; 0x1572 <GPIO_writePin+0x68>
    1556:	bc c0       	rjmp	.+376    	; 0x16d0 <GPIO_writePin+0x1c6>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <GPIO_writePin+0x5a>
    1562:	5f c0       	rjmp	.+190    	; 0x1622 <GPIO_writePin+0x118>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <GPIO_writePin+0x66>
    156e:	85 c0       	rjmp	.+266    	; 0x167a <GPIO_writePin+0x170>
    1570:	af c0       	rjmp	.+350    	; 0x16d0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1578:	ab e3       	ldi	r26, 0x3B	; 59
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	eb e3       	ldi	r30, 0x3B	; 59
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0x8c>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0x88>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	98 c0       	rjmp	.+304    	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_writePin+0xb4>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_writePin+0xb0>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	83 c0       	rjmp	.+262    	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0xe4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0xe0>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	6c c0       	rjmp	.+216    	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15f8:	a8 e3       	ldi	r26, 0x38	; 56
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e3       	ldi	r30, 0x38	; 56
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x10c>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x108>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	57 c0       	rjmp	.+174    	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	a1 f4       	brne	.+40     	; 0x1650 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1628:	a5 e3       	ldi	r26, 0x35	; 53
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_writePin+0x13c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_writePin+0x138>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	40 c0       	rjmp	.+128    	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1650:	a5 e3       	ldi	r26, 0x35	; 53
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e3       	ldi	r30, 0x35	; 53
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_writePin+0x164>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_writePin+0x160>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x194>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x190>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16a8:	a2 e3       	ldi	r26, 0x32	; 50
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0x1bc>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0x1b8>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_readPin+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPin+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16f2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_readPin+0x1c>
    16fa:	84 c0       	rjmp	.+264    	; 0x1804 <GPIO_readPin+0x124>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_readPin+0x24>
    1702:	80 c0       	rjmp	.+256    	; 0x1804 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3d 83       	std	Y+5, r19	; 0x05
    170c:	2c 83       	std	Y+4, r18	; 0x04
    170e:	4c 81       	ldd	r20, Y+4	; 0x04
    1710:	5d 81       	ldd	r21, Y+5	; 0x05
    1712:	41 30       	cpi	r20, 0x01	; 1
    1714:	51 05       	cpc	r21, r1
    1716:	79 f1       	breq	.+94     	; 0x1776 <GPIO_readPin+0x96>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	91 05       	cpc	r25, r1
    1720:	34 f4       	brge	.+12     	; 0x172e <GPIO_readPin+0x4e>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	21 15       	cp	r18, r1
    1728:	31 05       	cpc	r19, r1
    172a:	69 f0       	breq	.+26     	; 0x1746 <GPIO_readPin+0x66>
    172c:	6b c0       	rjmp	.+214    	; 0x1804 <GPIO_readPin+0x124>
    172e:	4c 81       	ldd	r20, Y+4	; 0x04
    1730:	5d 81       	ldd	r21, Y+5	; 0x05
    1732:	42 30       	cpi	r20, 0x02	; 2
    1734:	51 05       	cpc	r21, r1
    1736:	b9 f1       	breq	.+110    	; 0x17a6 <GPIO_readPin+0xc6>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <GPIO_readPin+0x64>
    1742:	49 c0       	rjmp	.+146    	; 0x17d6 <GPIO_readPin+0xf6>
    1744:	5f c0       	rjmp	.+190    	; 0x1804 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1746:	e9 e3       	ldi	r30, 0x39	; 57
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_readPin+0x7e>
    175a:	55 95       	asr	r21
    175c:	47 95       	ror	r20
    175e:	8a 95       	dec	r24
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_readPin+0x7a>
    1762:	ca 01       	movw	r24, r20
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	88 23       	and	r24, r24
    176a:	19 f0       	breq	.+6      	; 0x1772 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	49 c0       	rjmp	.+146    	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1772:	19 82       	std	Y+1, r1	; 0x01
    1774:	47 c0       	rjmp	.+142    	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1776:	e6 e3       	ldi	r30, 0x36	; 54
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_readPin+0xae>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_readPin+0xaa>
    1792:	ca 01       	movw	r24, r20
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 23       	and	r24, r24
    179a:	19 f0       	breq	.+6      	; 0x17a2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	31 c0       	rjmp	.+98     	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	2f c0       	rjmp	.+94     	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17a6:	e3 e3       	ldi	r30, 0x33	; 51
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_readPin+0xde>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_readPin+0xda>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	88 23       	and	r24, r24
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	19 c0       	rjmp	.+50     	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	17 c0       	rjmp	.+46     	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_readPin+0x10e>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_readPin+0x10a>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1802:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <GPIO_setupPortDirection+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <GPIO_setupPortDirection+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	90 f5       	brcc	.+100    	; 0x1890 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 83       	std	Y+4, r19	; 0x04
    1834:	2b 83       	std	Y+3, r18	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	d1 f0       	breq	.+52     	; 0x1874 <GPIO_setupPortDirection+0x5e>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <GPIO_setupPortDirection+0x3e>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <GPIO_setupPortDirection+0x54>
    1852:	1e c0       	rjmp	.+60     	; 0x1890 <GPIO_setupPortDirection+0x7a>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	81 f0       	breq	.+32     	; 0x187e <GPIO_setupPortDirection+0x68>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <GPIO_setupPortDirection+0x72>
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    186a:	ea e3       	ldi	r30, 0x3A	; 58
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	80 83       	st	Z, r24
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	80 83       	st	Z, r24
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    187e:	e4 e3       	ldi	r30, 0x34	; 52
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1888:	e1 e3       	ldi	r30, 0x31	; 49
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <GPIO_writePort+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_writePort+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	90 f5       	brcc	.+100    	; 0x1918 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	d1 f0       	breq	.+52     	; 0x18fc <GPIO_writePort+0x5e>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <GPIO_writePort+0x3e>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <GPIO_writePort+0x54>
    18da:	1e c0       	rjmp	.+60     	; 0x1918 <GPIO_writePort+0x7a>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <GPIO_writePort+0x68>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <GPIO_writePort+0x72>
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 83       	st	Z, r24
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1910:	e2 e3       	ldi	r30, 0x32	; 50
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
			break;
		}
	}
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <GPIO_readPort+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_readPort+0x8>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1934:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	90 f5       	brcc	.+100    	; 0x19a0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3c 83       	std	Y+4, r19	; 0x04
    1944:	2b 83       	std	Y+3, r18	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	d1 f0       	breq	.+52     	; 0x1984 <GPIO_readPort+0x5e>
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <GPIO_readPort+0x3e>
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <GPIO_readPort+0x54>
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <GPIO_readPort+0x7a>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <GPIO_readPort+0x68>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_readPort+0x72>
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    197a:	e9 e3       	ldi	r30, 0x39	; 57
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1984:	e6 e3       	ldi	r30, 0x36	; 54
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    198e:	e3 e3       	ldi	r30, 0x33	; 51
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1998:	e0 e3       	ldi	r30, 0x30	; 48
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <KEYPAD_getPressedKey+0x6>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	62 e0       	ldi	r22, 0x02	; 2
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	63 e0       	ldi	r22, 0x03	; 3
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	64 e0       	ldi	r22, 0x04	; 4
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	65 e0       	ldi	r22, 0x05	; 5
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	66 e0       	ldi	r22, 0x06	; 6
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	67 e0       	ldi	r22, 0x07	; 7
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a0a:	19 82       	std	Y+1, r1	; 0x01
    1a0c:	35 c0       	rjmp	.+106    	; 0x1a78 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	69 81       	ldd	r22, Y+1	; 0x01
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	69 81       	ldd	r22, Y+1	; 0x01
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a22:	1a 82       	std	Y+2, r1	; 0x02
    1a24:	1e c0       	rjmp	.+60     	; 0x1a62 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	98 2f       	mov	r25, r24
    1a2a:	9c 5f       	subi	r25, 0xFC	; 252
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	69 2f       	mov	r22, r25
    1a30:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_readPin>
    1a34:	88 23       	and	r24, r24
    1a36:	91 f4       	brne	.+36     	; 0x1a5c <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	98 2f       	mov	r25, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	89 0f       	add	r24, r25
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	f8 f2       	brcs	.-66     	; 0x1a26 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	69 81       	ldd	r22, Y+1	; 0x01
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	40 f2       	brcs	.-112    	; 0x1a0e <KEYPAD_getPressedKey+0x5e>
    1a7e:	c5 cf       	rjmp	.-118    	; 0x1a0a <KEYPAD_getPressedKey+0x5a>

00001a80 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3c 83       	std	Y+4, r19	; 0x04
    1a98:	2b 83       	std	Y+3, r18	; 0x03
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1aa4:	70 c0       	rjmp	.+224    	; 0x1b86 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	29 30       	cpi	r18, 0x09	; 9
    1aac:	31 05       	cpc	r19, r1
    1aae:	5c f5       	brge	.+86     	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1aba:	59 c0       	rjmp	.+178    	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1abc:	2b 81       	ldd	r18, Y+3	; 0x03
    1abe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac0:	25 30       	cpi	r18, 0x05	; 5
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	9c f4       	brge	.+38     	; 0x1aec <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ad0:	48 c0       	rjmp	.+144    	; 0x1b62 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	23 30       	cpi	r18, 0x03	; 3
    1ad8:	31 05       	cpc	r19, r1
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1adc:	45 c0       	rjmp	.+138    	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ae8:	39 c0       	rjmp	.+114    	; 0x1b5c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1aea:	67 c0       	rjmp	.+206    	; 0x1bba <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	26 30       	cpi	r18, 0x06	; 6
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1af6:	41 c0       	rjmp	.+130    	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	87 30       	cpi	r24, 0x07	; 7
    1afe:	91 05       	cpc	r25, r1
    1b00:	0c f0       	brlt	.+2      	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b02:	3e c0       	rjmp	.+124    	; 0x1b80 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b04:	37 c0       	rjmp	.+110    	; 0x1b74 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	2c 30       	cpi	r18, 0x0C	; 12
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b10:	46 c0       	rjmp	.+140    	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	8d 30       	cpi	r24, 0x0D	; 13
    1b18:	91 05       	cpc	r25, r1
    1b1a:	5c f4       	brge	.+22     	; 0x1b32 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	2a 30       	cpi	r18, 0x0A	; 10
    1b22:	31 05       	cpc	r19, r1
    1b24:	b1 f1       	breq	.+108    	; 0x1b92 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	8b 30       	cpi	r24, 0x0B	; 11
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	a4 f5       	brge	.+104    	; 0x1b98 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b30:	2d c0       	rjmp	.+90     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	2e 30       	cpi	r18, 0x0E	; 14
    1b38:	31 05       	cpc	r19, r1
    1b3a:	b9 f1       	breq	.+110    	; 0x1baa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	8e 30       	cpi	r24, 0x0E	; 14
    1b42:	91 05       	cpc	r25, r1
    1b44:	7c f1       	brlt	.+94     	; 0x1ba4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	2f 30       	cpi	r18, 0x0F	; 15
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	79 f1       	breq	.+94     	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	80 31       	cpi	r24, 0x10	; 16
    1b56:	91 05       	cpc	r25, r1
    1b58:	69 f1       	breq	.+90     	; 0x1bb4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b5a:	2f c0       	rjmp	.+94     	; 0x1bba <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b5c:	87 e0       	ldi	r24, 0x07	; 7
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	2e c0       	rjmp	.+92     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b62:	88 e0       	ldi	r24, 0x08	; 8
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	2b c0       	rjmp	.+86     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b68:	89 e0       	ldi	r24, 0x09	; 9
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	28 c0       	rjmp	.+80     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b6e:	85 e2       	ldi	r24, 0x25	; 37
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	25 c0       	rjmp	.+74     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	22 c0       	rjmp	.+68     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b7a:	85 e0       	ldi	r24, 0x05	; 5
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	1f c0       	rjmp	.+62     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b80:	86 e0       	ldi	r24, 0x06	; 6
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	1c c0       	rjmp	.+56     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b86:	8a e2       	ldi	r24, 0x2A	; 42
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	19 c0       	rjmp	.+50     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	16 c0       	rjmp	.+44     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	13 c0       	rjmp	.+38     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	10 c0       	rjmp	.+32     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b9e:	8d e2       	ldi	r24, 0x2D	; 45
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1baa:	19 82       	std	Y+1, r1	; 0x01
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1bae:	8d e3       	ldi	r24, 0x3D	; 61
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1bb4:	8b e2       	ldi	r24, 0x2B	; 43
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	2e 97       	sbiw	r28, 0x0e	; 14
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	63 e0       	ldi	r22, 0x03	; 3
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 ea       	ldi	r26, 0xA0	; 160
    1bfc:	b1 e4       	ldi	r27, 0x41	; 65
    1bfe:	8b 87       	std	Y+11, r24	; 0x0b
    1c00:	9c 87       	std	Y+12, r25	; 0x0c
    1c02:	ad 87       	std	Y+13, r26	; 0x0d
    1c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a e7       	ldi	r20, 0x7A	; 122
    1c14:	53 e4       	ldi	r21, 0x43	; 67
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8f 83       	std	Y+7, r24	; 0x07
    1c20:	98 87       	std	Y+8, r25	; 0x08
    1c22:	a9 87       	std	Y+9, r26	; 0x09
    1c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_init+0x7a>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_init+0xda>
    1c8a:	89 e1       	ldi	r24, 0x19	; 25
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_init+0xc8>
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_init+0xbc>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_init+0x104>
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	6f ef       	ldi	r22, 0xFF	; 255
    1cde:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ce2:	88 e3       	ldi	r24, 0x38	; 56
    1ce4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ce8:	8c e0       	ldi	r24, 0x0C	; 12
    1cea:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_sendCommand>
}
    1cf4:	2e 96       	adiw	r28, 0x0e	; 14
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	e9 97       	sbiw	r28, 0x39	; 57
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	8d ab       	std	Y+53, r24	; 0x35
    1d30:	9e ab       	std	Y+54, r25	; 0x36
    1d32:	af ab       	std	Y+55, r26	; 0x37
    1d34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6d a9       	ldd	r22, Y+53	; 0x35
    1d38:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a e7       	ldi	r20, 0x7A	; 122
    1d44:	53 e4       	ldi	r21, 0x43	; 67
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 ab       	std	Y+49, r24	; 0x31
    1d50:	9a ab       	std	Y+50, r25	; 0x32
    1d52:	ab ab       	std	Y+51, r26	; 0x33
    1d54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d56:	69 a9       	ldd	r22, Y+49	; 0x31
    1d58:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_sendCommand+0x72>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1d78:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6d a9       	ldd	r22, Y+53	; 0x35
    1d92:	7e a9       	ldd	r23, Y+54	; 0x36
    1d94:	8f a9       	ldd	r24, Y+55	; 0x37
    1d96:	98 ad       	ldd	r25, Y+56	; 0x38
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	98 ab       	std	Y+48, r25	; 0x30
    1db6:	8f a7       	std	Y+47, r24	; 0x2f
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCD_sendCommand+0xd2>
    1dba:	89 e1       	ldi	r24, 0x19	; 25
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e a7       	std	Y+46, r25	; 0x2e
    1dc0:	8d a7       	std	Y+45, r24	; 0x2d
    1dc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_sendCommand+0xc0>
    1dca:	9e a7       	std	Y+46, r25	; 0x2e
    1dcc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dda:	98 a9       	ldd	r25, Y+48	; 0x30
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCD_sendCommand+0xb4>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	69 a9       	ldd	r22, Y+49	; 0x31
    1de4:	7a a9       	ldd	r23, Y+50	; 0x32
    1de6:	8b a9       	ldd	r24, Y+51	; 0x33
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	98 ab       	std	Y+48, r25	; 0x30
    1df4:	8f a7       	std	Y+47, r24	; 0x2f
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	9c a7       	std	Y+44, r25	; 0x2c
    1dfc:	8b a7       	std	Y+43, r24	; 0x2b
    1dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0xfc>
    1e06:	9c a7       	std	Y+44, r25	; 0x2c
    1e08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	63 e0       	ldi	r22, 0x03	; 3
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e8       	ldi	r26, 0x80	; 128
    1e1a:	bf e3       	ldi	r27, 0x3F	; 63
    1e1c:	8f a3       	std	Y+39, r24	; 0x27
    1e1e:	98 a7       	std	Y+40, r25	; 0x28
    1e20:	a9 a7       	std	Y+41, r26	; 0x29
    1e22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6f a1       	ldd	r22, Y+39	; 0x27
    1e26:	78 a5       	ldd	r23, Y+40	; 0x28
    1e28:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8b a3       	std	Y+35, r24	; 0x23
    1e3e:	9c a3       	std	Y+36, r25	; 0x24
    1e40:	ad a3       	std	Y+37, r26	; 0x25
    1e42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_sendCommand+0x160>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1e66:	6b a1       	ldd	r22, Y+35	; 0x23
    1e68:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_sendCommand+0x1c0>
    1ea8:	89 e1       	ldi	r24, 0x19	; 25
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	98 a3       	std	Y+32, r25	; 0x20
    1eae:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb2:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_sendCommand+0x1ae>
    1eb8:	98 a3       	std	Y+32, r25	; 0x20
    1eba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <LCD_sendCommand+0x1a2>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eea:	8d 8f       	std	Y+29, r24	; 0x1d
    1eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x1ea>
    1ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	69 ad       	ldd	r22, Y+57	; 0x39
    1efc:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_writePort>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	89 8f       	std	Y+25, r24	; 0x19
    1f0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	69 8d       	ldd	r22, Y+25	; 0x19
    1f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8d 8b       	std	Y+21, r24	; 0x15
    1f2a:	9e 8b       	std	Y+22, r25	; 0x16
    1f2c:	af 8b       	std	Y+23, r26	; 0x17
    1f2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1f52:	6d 89       	ldd	r22, Y+21	; 0x15
    1f54:	7e 89       	ldd	r23, Y+22	; 0x16
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_sendCommand+0x2ac>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9a 8b       	std	Y+18, r25	; 0x12
    1f9a:	89 8b       	std	Y+17, r24	; 0x11
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_sendCommand+0x29a>
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_sendCommand+0x28e>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd4:	98 8b       	std	Y+16, r25	; 0x10
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	98 89       	ldd	r25, Y+16	; 0x10
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_sendCommand+0x2d6>
    1fe0:	98 8b       	std	Y+16, r25	; 0x10
    1fe2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	63 e0       	ldi	r22, 0x03	; 3
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e8       	ldi	r26, 0x80	; 128
    1ff4:	bf e3       	ldi	r27, 0x3F	; 63
    1ff6:	8b 87       	std	Y+11, r24	; 0x0b
    1ff8:	9c 87       	std	Y+12, r25	; 0x0c
    1ffa:	ad 87       	std	Y+13, r26	; 0x0d
    1ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_sendCommand+0x39a>
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x388>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_sendCommand+0x37c>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_sendCommand+0x3c4>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20d2:	e9 96       	adiw	r28, 0x39	; 57
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	e9 97       	sbiw	r28, 0x39	; 57
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	62 e0       	ldi	r22, 0x02	; 2
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	8d ab       	std	Y+53, r24	; 0x35
    210e:	9e ab       	std	Y+54, r25	; 0x36
    2110:	af ab       	std	Y+55, r26	; 0x37
    2112:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	6d a9       	ldd	r22, Y+53	; 0x35
    2116:	7e a9       	ldd	r23, Y+54	; 0x36
    2118:	8f a9       	ldd	r24, Y+55	; 0x37
    211a:	98 ad       	ldd	r25, Y+56	; 0x38
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	53 e4       	ldi	r21, 0x43	; 67
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	89 ab       	std	Y+49, r24	; 0x31
    212e:	9a ab       	std	Y+50, r25	; 0x32
    2130:	ab ab       	std	Y+51, r26	; 0x33
    2132:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2134:	69 a9       	ldd	r22, Y+49	; 0x31
    2136:	7a a9       	ldd	r23, Y+50	; 0x32
    2138:	8b a9       	ldd	r24, Y+51	; 0x33
    213a:	9c a9       	ldd	r25, Y+52	; 0x34
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	2c f4       	brge	.+10     	; 0x2156 <LCD_displayCharacter+0x72>
		__ticks = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	98 ab       	std	Y+48, r25	; 0x30
    2152:	8f a7       	std	Y+47, r24	; 0x2f
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	4c f5       	brge	.+82     	; 0x21c0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216e:	6d a9       	ldd	r22, Y+53	; 0x35
    2170:	7e a9       	ldd	r23, Y+54	; 0x36
    2172:	8f a9       	ldd	r24, Y+55	; 0x37
    2174:	98 ad       	ldd	r25, Y+56	; 0x38
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	98 ab       	std	Y+48, r25	; 0x30
    2194:	8f a7       	std	Y+47, r24	; 0x2f
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <LCD_displayCharacter+0xd2>
    2198:	89 e1       	ldi	r24, 0x19	; 25
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e a7       	std	Y+46, r25	; 0x2e
    219e:	8d a7       	std	Y+45, r24	; 0x2d
    21a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_displayCharacter+0xc0>
    21a8:	9e a7       	std	Y+46, r25	; 0x2e
    21aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	69 f7       	brne	.-38     	; 0x2198 <LCD_displayCharacter+0xb4>
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	69 a9       	ldd	r22, Y+49	; 0x31
    21c2:	7a a9       	ldd	r23, Y+50	; 0x32
    21c4:	8b a9       	ldd	r24, Y+51	; 0x33
    21c6:	9c a9       	ldd	r25, Y+52	; 0x34
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	9c a7       	std	Y+44, r25	; 0x2c
    21da:	8b a7       	std	Y+43, r24	; 0x2b
    21dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21de:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_displayCharacter+0xfc>
    21e4:	9c a7       	std	Y+44, r25	; 0x2c
    21e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	63 e0       	ldi	r22, 0x03	; 3
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e8       	ldi	r26, 0x80	; 128
    21f8:	bf e3       	ldi	r27, 0x3F	; 63
    21fa:	8f a3       	std	Y+39, r24	; 0x27
    21fc:	98 a7       	std	Y+40, r25	; 0x28
    21fe:	a9 a7       	std	Y+41, r26	; 0x29
    2200:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2202:	6f a1       	ldd	r22, Y+39	; 0x27
    2204:	78 a5       	ldd	r23, Y+40	; 0x28
    2206:	89 a5       	ldd	r24, Y+41	; 0x29
    2208:	9a a5       	ldd	r25, Y+42	; 0x2a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4a e7       	ldi	r20, 0x7A	; 122
    2210:	53 e4       	ldi	r21, 0x43	; 67
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8b a3       	std	Y+35, r24	; 0x23
    221c:	9c a3       	std	Y+36, r25	; 0x24
    221e:	ad a3       	std	Y+37, r26	; 0x25
    2220:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2222:	6b a1       	ldd	r22, Y+35	; 0x23
    2224:	7c a1       	ldd	r23, Y+36	; 0x24
    2226:	8d a1       	ldd	r24, Y+37	; 0x25
    2228:	9e a1       	ldd	r25, Y+38	; 0x26
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	2c f4       	brge	.+10     	; 0x2244 <LCD_displayCharacter+0x160>
		__ticks = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9a a3       	std	Y+34, r25	; 0x22
    2240:	89 a3       	std	Y+33, r24	; 0x21
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	4c f5       	brge	.+82     	; 0x22ae <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225c:	6f a1       	ldd	r22, Y+39	; 0x27
    225e:	78 a5       	ldd	r23, Y+40	; 0x28
    2260:	89 a5       	ldd	r24, Y+41	; 0x29
    2262:	9a a5       	ldd	r25, Y+42	; 0x2a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e2       	ldi	r20, 0x20	; 32
    226a:	51 e4       	ldi	r21, 0x41	; 65
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9a a3       	std	Y+34, r25	; 0x22
    2282:	89 a3       	std	Y+33, r24	; 0x21
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <LCD_displayCharacter+0x1c0>
    2286:	89 e1       	ldi	r24, 0x19	; 25
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	98 a3       	std	Y+32, r25	; 0x20
    228c:	8f 8f       	std	Y+31, r24	; 0x1f
    228e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2290:	98 a1       	ldd	r25, Y+32	; 0x20
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_displayCharacter+0x1ae>
    2296:	98 a3       	std	Y+32, r25	; 0x20
    2298:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	89 a1       	ldd	r24, Y+33	; 0x21
    229c:	9a a1       	ldd	r25, Y+34	; 0x22
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	89 a1       	ldd	r24, Y+33	; 0x21
    22a6:	9a a1       	ldd	r25, Y+34	; 0x22
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	69 f7       	brne	.-38     	; 0x2286 <LCD_displayCharacter+0x1a2>
    22ac:	14 c0       	rjmp	.+40     	; 0x22d6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
    22c2:	89 a1       	ldd	r24, Y+33	; 0x21
    22c4:	9a a1       	ldd	r25, Y+34	; 0x22
    22c6:	9e 8f       	std	Y+30, r25	; 0x1e
    22c8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_displayCharacter+0x1ea>
    22d2:	9e 8f       	std	Y+30, r25	; 0x1e
    22d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	69 ad       	ldd	r22, Y+57	; 0x39
    22da:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_writePort>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e8       	ldi	r26, 0x80	; 128
    22e4:	bf e3       	ldi	r27, 0x3F	; 63
    22e6:	89 8f       	std	Y+25, r24	; 0x19
    22e8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ea:	ab 8f       	std	Y+27, r26	; 0x1b
    22ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	69 8d       	ldd	r22, Y+25	; 0x19
    22f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	53 e4       	ldi	r21, 0x43	; 67
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <LCD_displayCharacter+0x2ac>
    2372:	89 e1       	ldi	r24, 0x19	; 25
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9a 8b       	std	Y+18, r25	; 0x12
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	9a 89       	ldd	r25, Y+18	; 0x12
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_displayCharacter+0x29a>
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9c 89       	ldd	r25, Y+20	; 0x14
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <LCD_displayCharacter+0x28e>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	98 8b       	std	Y+16, r25	; 0x10
    23b4:	8f 87       	std	Y+15, r24	; 0x0f
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	98 89       	ldd	r25, Y+16	; 0x10
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCD_displayCharacter+0x2d6>
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_writePin>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a0 e8       	ldi	r26, 0x80	; 128
    23d2:	bf e3       	ldi	r27, 0x3F	; 63
    23d4:	8b 87       	std	Y+11, r24	; 0x0b
    23d6:	9c 87       	std	Y+12, r25	; 0x0c
    23d8:	ad 87       	std	Y+13, r26	; 0x0d
    23da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23de:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	4a e7       	ldi	r20, 0x7A	; 122
    23ea:	53 e4       	ldi	r21, 0x43	; 67
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8f 83       	std	Y+7, r24	; 0x07
    23f6:	98 87       	std	Y+8, r25	; 0x08
    23f8:	a9 87       	std	Y+9, r26	; 0x09
    23fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	2c f4       	brge	.+10     	; 0x241e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	3f c0       	rjmp	.+126    	; 0x249c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	4c f5       	brge	.+82     	; 0x2488 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	6b 85       	ldd	r22, Y+11	; 0x0b
    2438:	7c 85       	ldd	r23, Y+12	; 0x0c
    243a:	8d 85       	ldd	r24, Y+13	; 0x0d
    243c:	9e 85       	ldd	r25, Y+14	; 0x0e
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	0f c0       	rjmp	.+30     	; 0x247e <LCD_displayCharacter+0x39a>
    2460:	89 e1       	ldi	r24, 0x19	; 25
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	8b 83       	std	Y+3, r24	; 0x03
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <LCD_displayCharacter+0x388>
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <LCD_displayCharacter+0x37c>
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_displayCharacter+0x3c4>
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24b0:	e9 96       	adiw	r28, 0x39	; 57
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <LCD_displayString+0x6>
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9b 83       	std	Y+3, r25	; 0x03
    24d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24d2:	19 82       	std	Y+1, r1	; 0x01
    24d4:	0e c0       	rjmp	.+28     	; 0x24f2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	fc 01       	movw	r30, r24
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	80 81       	ld	r24, Z
    24e8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_displayCharacter>
		i++;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	fc 01       	movw	r30, r24
    24fe:	e2 0f       	add	r30, r18
    2500:	f3 1f       	adc	r31, r19
    2502:	80 81       	ld	r24, Z
    2504:	88 23       	and	r24, r24
    2506:	39 f7       	brne	.-50     	; 0x24d6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <LCD_moveCursor+0x6>
    251a:	00 d0       	rcall	.+0      	; 0x251c <LCD_moveCursor+0x8>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	8a 83       	std	Y+2, r24	; 0x02
    2524:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	3d 83       	std	Y+5, r19	; 0x05
    252e:	2c 83       	std	Y+4, r18	; 0x04
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	91 05       	cpc	r25, r1
    2538:	c1 f0       	breq	.+48     	; 0x256a <LCD_moveCursor+0x56>
    253a:	2c 81       	ldd	r18, Y+4	; 0x04
    253c:	3d 81       	ldd	r19, Y+5	; 0x05
    253e:	22 30       	cpi	r18, 0x02	; 2
    2540:	31 05       	cpc	r19, r1
    2542:	2c f4       	brge	.+10     	; 0x254e <LCD_moveCursor+0x3a>
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	61 f0       	breq	.+24     	; 0x2564 <LCD_moveCursor+0x50>
    254c:	19 c0       	rjmp	.+50     	; 0x2580 <LCD_moveCursor+0x6c>
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	22 30       	cpi	r18, 0x02	; 2
    2554:	31 05       	cpc	r19, r1
    2556:	69 f0       	breq	.+26     	; 0x2572 <LCD_moveCursor+0x5e>
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	9d 81       	ldd	r25, Y+5	; 0x05
    255c:	83 30       	cpi	r24, 0x03	; 3
    255e:	91 05       	cpc	r25, r1
    2560:	61 f0       	breq	.+24     	; 0x257a <LCD_moveCursor+0x66>
    2562:	0e c0       	rjmp	.+28     	; 0x2580 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	0b c0       	rjmp	.+22     	; 0x2580 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	80 5c       	subi	r24, 0xC0	; 192
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	07 c0       	rjmp	.+14     	; 0x2580 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	80 5f       	subi	r24, 0xF0	; 240
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	80 5b       	subi	r24, 0xB0	; 176
    257e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	80 68       	ori	r24, 0x80	; 128
    2584:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_sendCommand>
}
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_displayStringRowColumn+0x6>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <LCD_displayStringRowColumn+0x8>
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	6a 83       	std	Y+2, r22	; 0x02
    25a8:	5c 83       	std	Y+4, r21	; 0x04
    25aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	6a 81       	ldd	r22, Y+2	; 0x02
    25b0:	0e 94 8a 12 	call	0x2514	; 0x2514 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	62 97       	sbiw	r28, 0x12	; 18
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	9a 8b       	std	Y+18, r25	; 0x12
    25e0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); 	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25e2:	89 89       	ldd	r24, Y+17	; 0x11
    25e4:	9a 89       	ldd	r25, Y+18	; 0x12
    25e6:	9e 01       	movw	r18, r28
    25e8:	2f 5f       	subi	r18, 0xFF	; 255
    25ea:	3f 4f       	sbci	r19, 0xFF	; 255
    25ec:	b9 01       	movw	r22, r18
    25ee:	4a e0       	ldi	r20, 0x0A	; 10
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <itoa>
   LCD_displayString(buff); /* Display the string */
    25f6:	ce 01       	movw	r24, r28
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_displayString>
}
    25fe:	62 96       	adiw	r28, 0x12	; 18
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_sendCommand>
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect){
    2624:	1f 92       	push	r1
    2626:	0f 92       	push	r0
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	0f 92       	push	r0
    262c:	11 24       	eor	r1, r1
    262e:	2f 93       	push	r18
    2630:	3f 93       	push	r19
    2632:	4f 93       	push	r20
    2634:	5f 93       	push	r21
    2636:	6f 93       	push	r22
    2638:	7f 93       	push	r23
    263a:	8f 93       	push	r24
    263c:	9f 93       	push	r25
    263e:	af 93       	push	r26
    2640:	bf 93       	push	r27
    2642:	ef 93       	push	r30
    2644:	ff 93       	push	r31
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    264e:	80 91 11 01 	lds	r24, 0x0111
    2652:	90 91 12 01 	lds	r25, 0x0112
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	29 f0       	breq	.+10     	; 0x2664 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    265a:	e0 91 11 01 	lds	r30, 0x0111
    265e:	f0 91 12 01 	lds	r31, 0x0112
    2662:	09 95       	icall
	}
}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	ff 91       	pop	r31
    266a:	ef 91       	pop	r30
    266c:	bf 91       	pop	r27
    266e:	af 91       	pop	r26
    2670:	9f 91       	pop	r25
    2672:	8f 91       	pop	r24
    2674:	7f 91       	pop	r23
    2676:	6f 91       	pop	r22
    2678:	5f 91       	pop	r21
    267a:	4f 91       	pop	r20
    267c:	3f 91       	pop	r19
    267e:	2f 91       	pop	r18
    2680:	0f 90       	pop	r0
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	0f 90       	pop	r0
    2686:	1f 90       	pop	r1
    2688:	18 95       	reti

0000268a <__vector_7>:


ISR(TIMER1_COMPA_vect){
    268a:	1f 92       	push	r1
    268c:	0f 92       	push	r0
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	0f 92       	push	r0
    2692:	11 24       	eor	r1, r1
    2694:	2f 93       	push	r18
    2696:	3f 93       	push	r19
    2698:	4f 93       	push	r20
    269a:	5f 93       	push	r21
    269c:	6f 93       	push	r22
    269e:	7f 93       	push	r23
    26a0:	8f 93       	push	r24
    26a2:	9f 93       	push	r25
    26a4:	af 93       	push	r26
    26a6:	bf 93       	push	r27
    26a8:	ef 93       	push	r30
    26aa:	ff 93       	push	r31
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    26b4:	80 91 11 01 	lds	r24, 0x0111
    26b8:	90 91 12 01 	lds	r25, 0x0112
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	29 f0       	breq	.+10     	; 0x26ca <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    26c0:	e0 91 11 01 	lds	r30, 0x0111
    26c4:	f0 91 12 01 	lds	r31, 0x0112
    26c8:	09 95       	icall
	}
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    26f0:	1f 92       	push	r1
    26f2:	0f 92       	push	r0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	0f 92       	push	r0
    26f8:	11 24       	eor	r1, r1
    26fa:	2f 93       	push	r18
    26fc:	3f 93       	push	r19
    26fe:	4f 93       	push	r20
    2700:	5f 93       	push	r21
    2702:	6f 93       	push	r22
    2704:	7f 93       	push	r23
    2706:	8f 93       	push	r24
    2708:	9f 93       	push	r25
    270a:	af 93       	push	r26
    270c:	bf 93       	push	r27
    270e:	ef 93       	push	r30
    2710:	ff 93       	push	r31
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    271a:	80 91 11 01 	lds	r24, 0x0111
    271e:	90 91 12 01 	lds	r25, 0x0112
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	29 f0       	breq	.+10     	; 0x2730 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2726:	e0 91 11 01 	lds	r30, 0x0111
    272a:	f0 91 12 01 	lds	r31, 0x0112
    272e:	09 95       	icall
	}
}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	ff 91       	pop	r31
    2736:	ef 91       	pop	r30
    2738:	bf 91       	pop	r27
    273a:	af 91       	pop	r26
    273c:	9f 91       	pop	r25
    273e:	8f 91       	pop	r24
    2740:	7f 91       	pop	r23
    2742:	6f 91       	pop	r22
    2744:	5f 91       	pop	r21
    2746:	4f 91       	pop	r20
    2748:	3f 91       	pop	r19
    274a:	2f 91       	pop	r18
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <Timer1_init>:

/*
 * Description :
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <Timer1_init+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <Timer1_init+0x8>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <Timer1_init+0xa>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
	/*Timer initialization
	 * Mode Selection
	 * Prescaler Assignment
	 * Zeroing Clock
	 */
	TCCR1A=(((Config_Ptr->mode)&0b0011)<<WGM10);
    2768:	af e4       	ldi	r26, 0x4F	; 79
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	85 81       	ldd	r24, Z+5	; 0x05
    2772:	83 70       	andi	r24, 0x03	; 3
    2774:	8c 93       	st	X, r24
	TCCR1B=(((Config_Ptr->mode)&0b1100)<<WGM12) | ((Config_Ptr->prescaler)<<CS10);
    2776:	ae e4       	ldi	r26, 0x4E	; 78
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e9 81       	ldd	r30, Y+1	; 0x01
    277c:	fa 81       	ldd	r31, Y+2	; 0x02
    277e:	85 81       	ldd	r24, Z+5	; 0x05
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	8c 70       	andi	r24, 0x0C	; 12
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	98 2f       	mov	r25, r24
    2796:	e9 81       	ldd	r30, Y+1	; 0x01
    2798:	fa 81       	ldd	r31, Y+2	; 0x02
    279a:	84 81       	ldd	r24, Z+4	; 0x04
    279c:	89 2b       	or	r24, r25
    279e:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    27a0:	ac e4       	ldi	r26, 0x4C	; 76
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e9 81       	ldd	r30, Y+1	; 0x01
    27a6:	fa 81       	ldd	r31, Y+2	; 0x02
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	11 96       	adiw	r26, 0x01	; 1
    27ae:	9c 93       	st	X, r25
    27b0:	8e 93       	st	-X, r24

	/*Initializing PWM-dependant bits*/
	switch(Config_Ptr->mode){
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	fa 81       	ldd	r31, Y+2	; 0x02
    27b6:	85 81       	ldd	r24, Z+5	; 0x05
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	3e 83       	std	Y+6, r19	; 0x06
    27be:	2d 83       	std	Y+5, r18	; 0x05
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	9e 81       	ldd	r25, Y+6	; 0x06
    27c4:	88 30       	cpi	r24, 0x08	; 8
    27c6:	91 05       	cpc	r25, r1
    27c8:	84 f4       	brge	.+32     	; 0x27ea <Timer1_init+0x94>
    27ca:	2d 81       	ldd	r18, Y+5	; 0x05
    27cc:	3e 81       	ldd	r19, Y+6	; 0x06
    27ce:	25 30       	cpi	r18, 0x05	; 5
    27d0:	31 05       	cpc	r19, r1
    27d2:	24 f5       	brge	.+72     	; 0x281c <Timer1_init+0xc6>
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	91 05       	cpc	r25, r1
    27dc:	74 f1       	brlt	.+92     	; 0x283a <Timer1_init+0xe4>
    27de:	2d 81       	ldd	r18, Y+5	; 0x05
    27e0:	3e 81       	ldd	r19, Y+6	; 0x06
    27e2:	24 30       	cpi	r18, 0x04	; 4
    27e4:	31 05       	cpc	r19, r1
    27e6:	14 f1       	brlt	.+68     	; 0x282c <Timer1_init+0xd6>
    27e8:	11 c0       	rjmp	.+34     	; 0x280c <Timer1_init+0xb6>
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	8c 30       	cpi	r24, 0x0C	; 12
    27f0:	91 05       	cpc	r25, r1
    27f2:	61 f0       	breq	.+24     	; 0x280c <Timer1_init+0xb6>
    27f4:	2d 81       	ldd	r18, Y+5	; 0x05
    27f6:	3e 81       	ldd	r19, Y+6	; 0x06
    27f8:	2c 30       	cpi	r18, 0x0C	; 12
    27fa:	31 05       	cpc	r19, r1
    27fc:	bc f0       	brlt	.+46     	; 0x282c <Timer1_init+0xd6>
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	0e 97       	sbiw	r24, 0x0e	; 14
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	91 05       	cpc	r25, r1
    2808:	c0 f4       	brcc	.+48     	; 0x283a <Timer1_init+0xe4>
    280a:	08 c0       	rjmp	.+16     	; 0x281c <Timer1_init+0xc6>
		case CTC_OCR1A:
		case CTC_ICR1:
			TCCR1A|= (1<<FOC1A) | (1<<COM1A1) | (1<<COM1A0);	/*Set OC1A, Non-PWM*/
    280c:	af e4       	ldi	r26, 0x4F	; 79
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ef e4       	ldi	r30, 0x4F	; 79
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	88 6c       	ori	r24, 0xC8	; 200
    2818:	8c 93       	st	X, r24
    281a:	0f c0       	rjmp	.+30     	; 0x283a <Timer1_init+0xe4>
		case FAST_PWM_8_BIT:
		case FAST_PWM_9_BIT:
		case FAST_PWM_10_BIT:
		case FAST_PWM_OCR1A:
		case FAST_PWM_ICR1:
			SET_BIT(TCCR1A, COM1A1);							/*Non-inverting mode, FAST PWM*/
    281c:	af e4       	ldi	r26, 0x4F	; 79
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ef e4       	ldi	r30, 0x4F	; 79
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	8c 93       	st	X, r24
    282a:	07 c0       	rjmp	.+14     	; 0x283a <Timer1_init+0xe4>
		case PWM_PHASE_10_BIT:
		case PWM_PHASE_AND_FREQ_OCR1A:
		case PWM_PHASE_OCR1A:
		case PWM_PHASE_AND_FREQ_ICR1:
		case PWM_PHASE_ICR1:
			TCCR1A|= (1<<COM1A1) | (1<<COM1A0);					/*Set OC1A, Phase Correct or Phase and Frequency Correct PWM*/
    282c:	af e4       	ldi	r26, 0x4F	; 79
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ef e4       	ldi	r30, 0x4F	; 79
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	80 6c       	ori	r24, 0xC0	; 192
    2838:	8c 93       	st	X, r24
		default:
			break;
	}

	/*Initializing mode-dependant bits*/
	switch(Config_Ptr->mode){
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	85 81       	ldd	r24, Z+5	; 0x05
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3c 83       	std	Y+4, r19	; 0x04
    2846:	2b 83       	std	Y+3, r18	; 0x03
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	89 30       	cpi	r24, 0x09	; 9
    284e:	91 05       	cpc	r25, r1
    2850:	09 f4       	brne	.+2      	; 0x2854 <Timer1_init+0xfe>
    2852:	45 c0       	rjmp	.+138    	; 0x28de <Timer1_init+0x188>
    2854:	2b 81       	ldd	r18, Y+3	; 0x03
    2856:	3c 81       	ldd	r19, Y+4	; 0x04
    2858:	2a 30       	cpi	r18, 0x0A	; 10
    285a:	31 05       	cpc	r19, r1
    285c:	84 f4       	brge	.+32     	; 0x287e <Timer1_init+0x128>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	88 30       	cpi	r24, 0x08	; 8
    2864:	91 05       	cpc	r25, r1
    2866:	0c f0       	brlt	.+2      	; 0x286a <Timer1_init+0x114>
    2868:	53 c0       	rjmp	.+166    	; 0x2910 <Timer1_init+0x1ba>
    286a:	2b 81       	ldd	r18, Y+3	; 0x03
    286c:	3c 81       	ldd	r19, Y+4	; 0x04
    286e:	21 30       	cpi	r18, 0x01	; 1
    2870:	31 05       	cpc	r19, r1
    2872:	ac f5       	brge	.+106    	; 0x28de <Timer1_init+0x188>
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	11 f1       	breq	.+68     	; 0x28c0 <Timer1_init+0x16a>
    287c:	68 c0       	rjmp	.+208    	; 0x294e <Timer1_init+0x1f8>
    287e:	2b 81       	ldd	r18, Y+3	; 0x03
    2880:	3c 81       	ldd	r19, Y+4	; 0x04
    2882:	2c 30       	cpi	r18, 0x0C	; 12
    2884:	31 05       	cpc	r19, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <Timer1_init+0x134>
    2888:	43 c0       	rjmp	.+134    	; 0x2910 <Timer1_init+0x1ba>
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	8d 30       	cpi	r24, 0x0D	; 13
    2890:	91 05       	cpc	r25, r1
    2892:	5c f4       	brge	.+22     	; 0x28aa <Timer1_init+0x154>
    2894:	2b 81       	ldd	r18, Y+3	; 0x03
    2896:	3c 81       	ldd	r19, Y+4	; 0x04
    2898:	2a 30       	cpi	r18, 0x0A	; 10
    289a:	31 05       	cpc	r19, r1
    289c:	c9 f1       	breq	.+114    	; 0x2910 <Timer1_init+0x1ba>
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	8b 30       	cpi	r24, 0x0B	; 11
    28a4:	91 05       	cpc	r25, r1
    28a6:	d9 f0       	breq	.+54     	; 0x28de <Timer1_init+0x188>
    28a8:	52 c0       	rjmp	.+164    	; 0x294e <Timer1_init+0x1f8>
    28aa:	2b 81       	ldd	r18, Y+3	; 0x03
    28ac:	3c 81       	ldd	r19, Y+4	; 0x04
    28ae:	2e 30       	cpi	r18, 0x0E	; 14
    28b0:	31 05       	cpc	r19, r1
    28b2:	71 f1       	breq	.+92     	; 0x2910 <Timer1_init+0x1ba>
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	8f 30       	cpi	r24, 0x0F	; 15
    28ba:	91 05       	cpc	r25, r1
    28bc:	81 f0       	breq	.+32     	; 0x28de <Timer1_init+0x188>
    28be:	47 c0       	rjmp	.+142    	; 0x294e <Timer1_init+0x1f8>
		case NORMAL:
			GPIO_setupPinDirection(OVF_PORT_ID, OVF_PIN_ID, PIN_OUTPUT);
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
			SET_BIT(TIMSK,TOIE1);
    28ca:	a9 e5       	ldi	r26, 0x59	; 89
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e9 e5       	ldi	r30, 0x59	; 89
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	84 60       	ori	r24, 0x04	; 4
    28d6:	8c 93       	st	X, r24
			g_timer_mode=MODE_NORMAL;
    28d8:	10 92 13 01 	sts	0x0113, r1
    28dc:	38 c0       	rjmp	.+112    	; 0x294e <Timer1_init+0x1f8>
		case FAST_PWM_9_BIT:
		case FAST_PWM_10_BIT:
		case PWM_PHASE_AND_FREQ_OCR1A:
		case PWM_PHASE_OCR1A:
		case FAST_PWM_OCR1A:
			GPIO_setupPinDirection(COMP_A_PORT_ID, COMP_A_PIN_ID, PIN_OUTPUT);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	64 e0       	ldi	r22, 0x04	; 4
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
			OCR1A=Config_Ptr->compare_value;
    28e8:	aa e4       	ldi	r26, 0x4A	; 74
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	11 96       	adiw	r26, 0x01	; 1
    28f6:	9c 93       	st	X, r25
    28f8:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A);
    28fa:	a9 e5       	ldi	r26, 0x59	; 89
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e9 e5       	ldi	r30, 0x59	; 89
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	80 61       	ori	r24, 0x10	; 16
    2906:	8c 93       	st	X, r24
			g_timer_mode=MODE_COMPARE;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	80 93 13 01 	sts	0x0113, r24
    290e:	1f c0       	rjmp	.+62     	; 0x294e <Timer1_init+0x1f8>
			break;
		case PWM_PHASE_AND_FREQ_ICR1:
		case PWM_PHASE_ICR1:
		case CTC_ICR1:
		case FAST_PWM_ICR1:
			GPIO_setupPinDirection(ICU_PORT_ID, ICU_PIN_ID, PIN_OUTPUT);
    2910:	83 e0       	ldi	r24, 0x03	; 3
    2912:	66 e0       	ldi	r22, 0x06	; 6
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_setupPinDirection>
			ICR1=Config_Ptr->compare_value;
    291a:	a6 e4       	ldi	r26, 0x46	; 70
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	11 96       	adiw	r26, 0x01	; 1
    2928:	9c 93       	st	X, r25
    292a:	8e 93       	st	-X, r24
			SET_BIT(TCCR1B, ICES1);
    292c:	ae e4       	ldi	r26, 0x4E	; 78
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ee e4       	ldi	r30, 0x4E	; 78
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	80 64       	ori	r24, 0x40	; 64
    2938:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TICIE1);
    293a:	a9 e5       	ldi	r26, 0x59	; 89
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e9 e5       	ldi	r30, 0x59	; 89
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	80 62       	ori	r24, 0x20	; 32
    2946:	8c 93       	st	X, r24
			g_timer_mode=MODE_ICU;
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	80 93 13 01 	sts	0x0113, r24
			break;
		default:
			break;
	}
}
    294e:	26 96       	adiw	r28, 0x06	; 6
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <Timer1_deInit>:

/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void){
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <Timer1_deInit+0x6>
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    296a:	ef e4       	ldi	r30, 0x4F	; 79
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	10 82       	st	Z, r1
	TCCR1B = 0;
    2970:	ee e4       	ldi	r30, 0x4E	; 78
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	10 82       	st	Z, r1
	TCNT1 = 0;
    2976:	ec e4       	ldi	r30, 0x4C	; 76
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	11 82       	std	Z+1, r1	; 0x01
    297c:	10 82       	st	Z, r1

	/*Clear Timer Registers*/
	switch(g_timer_mode){
    297e:	80 91 13 01 	lds	r24, 0x0113
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	3a 83       	std	Y+2, r19	; 0x02
    2988:	29 83       	std	Y+1, r18	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	91 05       	cpc	r25, r1
    2992:	89 f0       	breq	.+34     	; 0x29b6 <Timer1_deInit+0x56>
    2994:	29 81       	ldd	r18, Y+1	; 0x01
    2996:	3a 81       	ldd	r19, Y+2	; 0x02
    2998:	22 30       	cpi	r18, 0x02	; 2
    299a:	31 05       	cpc	r19, r1
    299c:	c1 f0       	breq	.+48     	; 0x29ce <Timer1_deInit+0x6e>
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	f9 f4       	brne	.+62     	; 0x29e4 <Timer1_deInit+0x84>
		case MODE_NORMAL:
			CLEAR_BIT(TIMSK,TOIE1);
    29a6:	a9 e5       	ldi	r26, 0x59	; 89
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e9 e5       	ldi	r30, 0x59	; 89
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8b 7f       	andi	r24, 0xFB	; 251
    29b2:	8c 93       	st	X, r24
    29b4:	17 c0       	rjmp	.+46     	; 0x29e4 <Timer1_deInit+0x84>
			break;
		case MODE_COMPARE:
			OCR1A=0;
    29b6:	ea e4       	ldi	r30, 0x4A	; 74
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	11 82       	std	Z+1, r1	; 0x01
    29bc:	10 82       	st	Z, r1
			CLEAR_BIT(TIMSK,OCIE1A);
    29be:	a9 e5       	ldi	r26, 0x59	; 89
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e9 e5       	ldi	r30, 0x59	; 89
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	8f 7e       	andi	r24, 0xEF	; 239
    29ca:	8c 93       	st	X, r24
    29cc:	0b c0       	rjmp	.+22     	; 0x29e4 <Timer1_deInit+0x84>
			break;
		case MODE_ICU:
			ICR1 = 0;
    29ce:	e6 e4       	ldi	r30, 0x46	; 70
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	11 82       	std	Z+1, r1	; 0x01
    29d4:	10 82       	st	Z, r1
			CLEAR_BIT(TIMSK,TICIE1);
    29d6:	a9 e5       	ldi	r26, 0x59	; 89
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e9 e5       	ldi	r30, 0x59	; 89
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8f 7d       	andi	r24, 0xDF	; 223
    29e2:	8c 93       	st	X, r24
			break;
	}
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <Timer1_setCallBack>:

/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <Timer1_setCallBack+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	90 93 12 01 	sts	0x0112, r25
    2a04:	80 93 11 01 	sts	0x0111, r24
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <UART_init+0x6>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <UART_init+0x8>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a22:	1a 82       	std	Y+2, r1	; 0x02
    2a24:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a26:	eb e2       	ldi	r30, 0x2B	; 43
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a2e:	ea e2       	ldi	r30, 0x2A	; 42
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	88 e1       	ldi	r24, 0x18	; 24
    2a34:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity<<UPM0) | (Config_Ptr->stop_bit<<USBS) | (Config_Ptr->bit_data<<UCSZ0) ;
    2a36:	a0 e4       	ldi	r26, 0x40	; 64
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3e:	81 81       	ldd	r24, Z+1	; 0x01
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	82 95       	swap	r24
    2a46:	92 95       	swap	r25
    2a48:	90 7f       	andi	r25, 0xF0	; 240
    2a4a:	98 27       	eor	r25, r24
    2a4c:	80 7f       	andi	r24, 0xF0	; 240
    2a4e:	98 27       	eor	r25, r24
    2a50:	28 2f       	mov	r18, r24
    2a52:	20 68       	ori	r18, 0x80	; 128
    2a54:	eb 81       	ldd	r30, Y+3	; 0x03
    2a56:	fc 81       	ldd	r31, Y+4	; 0x04
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	28 2b       	or	r18, r24
    2a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a70:	80 81       	ld	r24, Z
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	82 2b       	or	r24, r18
    2a7c:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a80:	fc 81       	ldd	r31, Y+4	; 0x04
    2a82:	83 81       	ldd	r24, Z+3	; 0x03
    2a84:	94 81       	ldd	r25, Z+4	; 0x04
    2a86:	a5 81       	ldd	r26, Z+5	; 0x05
    2a88:	b6 81       	ldd	r27, Z+6	; 0x06
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	aa 1f       	adc	r26, r26
    2a90:	bb 1f       	adc	r27, r27
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	aa 1f       	adc	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	aa 1f       	adc	r26, r26
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	ad 01       	movw	r20, r26
    2aa6:	80 e4       	ldi	r24, 0x40	; 64
    2aa8:	92 e4       	ldi	r25, 0x42	; 66
    2aaa:	af e0       	ldi	r26, 0x0F	; 15
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__udivmodsi4>
    2ab6:	da 01       	movw	r26, r20
    2ab8:	c9 01       	movw	r24, r18
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ac0:	e0 e4       	ldi	r30, 0x40	; 64
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	89 2f       	mov	r24, r25
    2aca:	99 27       	eor	r25, r25
    2acc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ace:	e9 e2       	ldi	r30, 0x29	; 41
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	80 83       	st	Z, r24
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	0f 92       	push	r0
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2af0:	eb e2       	ldi	r30, 0x2B	; 43
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	80 72       	andi	r24, 0x20	; 32
    2afc:	90 70       	andi	r25, 0x00	; 0
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	b9 f3       	breq	.-18     	; 0x2af0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b02:	ec e2       	ldi	r30, 0x2C	; 44
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b1a:	eb e2       	ldi	r30, 0x2B	; 43
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	88 23       	and	r24, r24
    2b22:	dc f7       	brge	.-10     	; 0x2b1a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b24:	ec e2       	ldi	r30, 0x2C	; 44
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
}
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <UART_sendString+0x6>
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9b 83       	std	Y+3, r25	; 0x03
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	0e c0       	rjmp	.+28     	; 0x2b60 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	fc 01       	movw	r30, r24
    2b50:	e2 0f       	add	r30, r18
    2b52:	f3 1f       	adc	r31, r19
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <UART_sendByte>
		i++;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	80 81       	ld	r24, Z
    2b72:	88 23       	and	r24, r24
    2b74:	39 f7       	brne	.-50     	; 0x2b44 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <UART_receiveString+0xa>
    2b8c:	0f 92       	push	r0
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	9b 83       	std	Y+3, r25	; 0x03
    2b94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b96:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	8c 01       	movw	r16, r24
    2ba4:	02 0f       	add	r16, r18
    2ba6:	13 1f       	adc	r17, r19
    2ba8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    2bac:	f8 01       	movw	r30, r16
    2bae:	80 83       	st	Z, r24
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	8c 01       	movw	r16, r24
    2bc4:	02 0f       	add	r16, r18
    2bc6:	13 1f       	adc	r17, r19
    2bc8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_recieveByte>
    2bcc:	f8 01       	movw	r30, r16
    2bce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	83 32       	cpi	r24, 0x23	; 35
    2be4:	31 f7       	brne	.-52     	; 0x2bb2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f3 1f       	adc	r31, r19
    2bf6:	10 82       	st	Z, r1
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	08 95       	ret

00002c08 <__udivmodsi4>:
    2c08:	a1 e2       	ldi	r26, 0x21	; 33
    2c0a:	1a 2e       	mov	r1, r26
    2c0c:	aa 1b       	sub	r26, r26
    2c0e:	bb 1b       	sub	r27, r27
    2c10:	fd 01       	movw	r30, r26
    2c12:	0d c0       	rjmp	.+26     	; 0x2c2e <__udivmodsi4_ep>

00002c14 <__udivmodsi4_loop>:
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	ee 1f       	adc	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	a2 17       	cp	r26, r18
    2c1e:	b3 07       	cpc	r27, r19
    2c20:	e4 07       	cpc	r30, r20
    2c22:	f5 07       	cpc	r31, r21
    2c24:	20 f0       	brcs	.+8      	; 0x2c2e <__udivmodsi4_ep>
    2c26:	a2 1b       	sub	r26, r18
    2c28:	b3 0b       	sbc	r27, r19
    2c2a:	e4 0b       	sbc	r30, r20
    2c2c:	f5 0b       	sbc	r31, r21

00002c2e <__udivmodsi4_ep>:
    2c2e:	66 1f       	adc	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	88 1f       	adc	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	1a 94       	dec	r1
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <__udivmodsi4_loop>
    2c3a:	60 95       	com	r22
    2c3c:	70 95       	com	r23
    2c3e:	80 95       	com	r24
    2c40:	90 95       	com	r25
    2c42:	9b 01       	movw	r18, r22
    2c44:	ac 01       	movw	r20, r24
    2c46:	bd 01       	movw	r22, r26
    2c48:	cf 01       	movw	r24, r30
    2c4a:	08 95       	ret

00002c4c <__prologue_saves__>:
    2c4c:	2f 92       	push	r2
    2c4e:	3f 92       	push	r3
    2c50:	4f 92       	push	r4
    2c52:	5f 92       	push	r5
    2c54:	6f 92       	push	r6
    2c56:	7f 92       	push	r7
    2c58:	8f 92       	push	r8
    2c5a:	9f 92       	push	r9
    2c5c:	af 92       	push	r10
    2c5e:	bf 92       	push	r11
    2c60:	cf 92       	push	r12
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	ca 1b       	sub	r28, r26
    2c76:	db 0b       	sbc	r29, r27
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	09 94       	ijmp

00002c84 <__epilogue_restores__>:
    2c84:	2a 88       	ldd	r2, Y+18	; 0x12
    2c86:	39 88       	ldd	r3, Y+17	; 0x11
    2c88:	48 88       	ldd	r4, Y+16	; 0x10
    2c8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c96:	b9 84       	ldd	r11, Y+9	; 0x09
    2c98:	c8 84       	ldd	r12, Y+8	; 0x08
    2c9a:	df 80       	ldd	r13, Y+7	; 0x07
    2c9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2ca0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ca2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca8:	ce 0f       	add	r28, r30
    2caa:	d1 1d       	adc	r29, r1
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	ed 01       	movw	r28, r26
    2cb8:	08 95       	ret

00002cba <itoa>:
    2cba:	fb 01       	movw	r30, r22
    2cbc:	9f 01       	movw	r18, r30
    2cbe:	e8 94       	clt
    2cc0:	42 30       	cpi	r20, 0x02	; 2
    2cc2:	c4 f0       	brlt	.+48     	; 0x2cf4 <itoa+0x3a>
    2cc4:	45 32       	cpi	r20, 0x25	; 37
    2cc6:	b4 f4       	brge	.+44     	; 0x2cf4 <itoa+0x3a>
    2cc8:	4a 30       	cpi	r20, 0x0A	; 10
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <itoa+0x1c>
    2ccc:	97 fb       	bst	r25, 7
    2cce:	1e f4       	brtc	.+6      	; 0x2cd6 <itoa+0x1c>
    2cd0:	90 95       	com	r25
    2cd2:	81 95       	neg	r24
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	64 2f       	mov	r22, r20
    2cd8:	77 27       	eor	r23, r23
    2cda:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__udivmodhi4>
    2cde:	80 5d       	subi	r24, 0xD0	; 208
    2ce0:	8a 33       	cpi	r24, 0x3A	; 58
    2ce2:	0c f0       	brlt	.+2      	; 0x2ce6 <itoa+0x2c>
    2ce4:	89 5d       	subi	r24, 0xD9	; 217
    2ce6:	81 93       	st	Z+, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	a1 f7       	brne	.-24     	; 0x2cd6 <itoa+0x1c>
    2cee:	16 f4       	brtc	.+4      	; 0x2cf4 <itoa+0x3a>
    2cf0:	5d e2       	ldi	r21, 0x2D	; 45
    2cf2:	51 93       	st	Z+, r21
    2cf4:	10 82       	st	Z, r1
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <strrev>

00002cfc <strrev>:
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	fc 01       	movw	r30, r24
    2d00:	67 2f       	mov	r22, r23
    2d02:	71 91       	ld	r23, Z+
    2d04:	77 23       	and	r23, r23
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <strrev+0x4>
    2d08:	32 97       	sbiw	r30, 0x02	; 2
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <strrev+0x18>
    2d0c:	7c 91       	ld	r23, X
    2d0e:	6d 93       	st	X+, r22
    2d10:	70 83       	st	Z, r23
    2d12:	62 91       	ld	r22, -Z
    2d14:	ae 17       	cp	r26, r30
    2d16:	bf 07       	cpc	r27, r31
    2d18:	c8 f3       	brcs	.-14     	; 0x2d0c <strrev+0x10>
    2d1a:	08 95       	ret

00002d1c <__udivmodhi4>:
    2d1c:	aa 1b       	sub	r26, r26
    2d1e:	bb 1b       	sub	r27, r27
    2d20:	51 e1       	ldi	r21, 0x11	; 17
    2d22:	07 c0       	rjmp	.+14     	; 0x2d32 <__udivmodhi4_ep>

00002d24 <__udivmodhi4_loop>:
    2d24:	aa 1f       	adc	r26, r26
    2d26:	bb 1f       	adc	r27, r27
    2d28:	a6 17       	cp	r26, r22
    2d2a:	b7 07       	cpc	r27, r23
    2d2c:	10 f0       	brcs	.+4      	; 0x2d32 <__udivmodhi4_ep>
    2d2e:	a6 1b       	sub	r26, r22
    2d30:	b7 0b       	sbc	r27, r23

00002d32 <__udivmodhi4_ep>:
    2d32:	88 1f       	adc	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	5a 95       	dec	r21
    2d38:	a9 f7       	brne	.-22     	; 0x2d24 <__udivmodhi4_loop>
    2d3a:	80 95       	com	r24
    2d3c:	90 95       	com	r25
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	08 95       	ret

00002d44 <_exit>:
    2d44:	f8 94       	cli

00002d46 <__stop_program>:
    2d46:	ff cf       	rjmp	.-2      	; 0x2d46 <__stop_program>
