
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001ed0  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  00001f76  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137a  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_6>
      1c:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_7>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <GPIO_setupPinDirection+0x2>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 ed       	ldi	r30, 0xD0	; 208
      ea:	fe e1       	ldi	r31, 0x1E	; 30
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <.do_copy_data_start>

000000ee <.do_copy_data_loop>:
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0

000000f2 <.do_copy_data_start>:
      f2:	a2 37       	cpi	r26, 0x72	; 114
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <.do_copy_data_loop>

000000f8 <__do_clear_bss>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	a2 e7       	ldi	r26, 0x72	; 114
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a7 37       	cpi	r26, 0x77	; 119
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
     10c:	0c 94 8a 00 	jmp	0x114	; 0x114 <exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <exit>:
     114:	f8 94       	cli
     116:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_exit>

0000011a <DcMotor_Init>:

#include "DC_Motor.h"
#include "gpio.h"
#include "PWM.h"

void DcMotor_Init(void){
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	67 e0       	ldi	r22, 0x07	; 7
     126:	41 e0       	ldi	r20, 0x01	; 1
     128:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	66 e0       	ldi	r22, 0x06	; 6
     130:	41 e0       	ldi	r20, 0x01	; 1
     132:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	67 e0       	ldi	r22, 0x07	; 7
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	66 e0       	ldi	r22, 0x06	; 6
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
}
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	00 d0       	rcall	.+0      	; 0x156 <DcMotor_Rotate+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	6a 83       	std	Y+2, r22	; 0x02
	if(state==CW){
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	59 f4       	brne	.+22     	; 0x17a <DcMotor_Rotate+0x2a>
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	67 e0       	ldi	r22, 0x07	; 7
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	66 e0       	ldi	r22, 0x06	; 6
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
     178:	1b c0       	rjmp	.+54     	; 0x1b0 <DcMotor_Rotate+0x60>
	}
	else if(state==A_CW){
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	59 f4       	brne	.+22     	; 0x196 <DcMotor_Rotate+0x46>
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	67 e0       	ldi	r22, 0x07	; 7
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	66 e0       	ldi	r22, 0x06	; 6
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <DcMotor_Rotate+0x60>
	}
	else if(state==STOP){
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	88 23       	and	r24, r24
     19a:	51 f4       	brne	.+20     	; 0x1b0 <DcMotor_Rotate+0x60>
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	67 e0       	ldi	r22, 0x07	; 7
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	66 e0       	ldi	r22, 0x06	; 6
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
	}
	else{}
	PWM_Timer0_Start(speed);
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PWM_Timer0_Start>
}
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	08 95       	ret

000001c0 <PWM_Timer0_Start>:

#include <avr/io.h>
#include "gpio.h"
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle){
     1c0:	df 93       	push	r29
     1c2:	cf 93       	push	r28
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <PWM_Timer0_Start+0x6>
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PWM_duty_cycle;
	TCNT0 = 0;
     1cc:	e2 e5       	ldi	r30, 0x52	; 82
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
	PWM_duty_cycle=(uint8)(((float)duty_cycle/100.0)*255);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	bc 01       	movw	r22, r24
     1de:	cd 01       	movw	r24, r26
     1e0:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	48 ec       	ldi	r20, 0xC8	; 200
     1f2:	52 e4       	ldi	r21, 0x42	; 66
     1f4:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divsf3>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	bc 01       	movw	r22, r24
     1fe:	cd 01       	movw	r24, r26
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	4f e7       	ldi	r20, 0x7F	; 127
     206:	53 e4       	ldi	r21, 0x43	; 67
     208:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__mulsf3>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	bc 01       	movw	r22, r24
     212:	cd 01       	movw	r24, r26
     214:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixunssfsi>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=PWM_duty_cycle;
     21e:	ec e5       	ldi	r30, 0x5C	; 92
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT);
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	63 e0       	ldi	r22, 0x03	; 3
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     230:	e3 e5       	ldi	r30, 0x53	; 83
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	8a e6       	ldi	r24, 0x6A	; 106
     236:	80 83       	st	Z, r24
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	cf 91       	pop	r28
     23e:	df 91       	pop	r29
     240:	08 95       	ret

00000242 <CONTROL_edgeProcessing>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CONTROL_edgeProcessing(void)
{
     242:	df 93       	push	r29
     244:	cf 93       	push	r28
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
	g_secs_count++;
     24a:	80 91 72 00 	lds	r24, 0x0072
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 72 00 	sts	0x0072, r24
}
     254:	cf 91       	pop	r28
     256:	df 91       	pop	r29
     258:	08 95       	ret

0000025a <receivePassword>:

void receivePassword(uint8 *password){
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	df 93       	push	r29
     260:	cf 93       	push	r28
     262:	00 d0       	rcall	.+0      	; 0x264 <receivePassword+0xa>
     264:	0f 92       	push	r0
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	9b 83       	std	Y+3, r25	; 0x03
     26c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     26e:	19 82       	std	Y+1, r1	; 0x01
	password[i]=UART_recieveByte();
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	8c 01       	movw	r16, r24
     27c:	02 0f       	add	r16, r18
     27e:	13 1f       	adc	r17, r19
     280:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
     284:	f8 01       	movw	r30, r16
     286:	80 83       	st	Z, r24
     288:	0f c0       	rjmp	.+30     	; 0x2a8 <receivePassword+0x4e>
	while (password[i]!=13){
		i++;
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	89 83       	std	Y+1, r24	; 0x01
		password[i]=UART_recieveByte();
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	8a 81       	ldd	r24, Y+2	; 0x02
     298:	9b 81       	ldd	r25, Y+3	; 0x03
     29a:	8c 01       	movw	r16, r24
     29c:	02 0f       	add	r16, r18
     29e:	13 1f       	adc	r17, r19
     2a0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
     2a4:	f8 01       	movw	r30, r16
     2a6:	80 83       	st	Z, r24
}

void receivePassword(uint8 *password){
	uint8 i=0;
	password[i]=UART_recieveByte();
	while (password[i]!=13){
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	28 2f       	mov	r18, r24
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	9b 81       	ldd	r25, Y+3	; 0x03
     2b2:	fc 01       	movw	r30, r24
     2b4:	e2 0f       	add	r30, r18
     2b6:	f3 1f       	adc	r31, r19
     2b8:	80 81       	ld	r24, Z
     2ba:	8d 30       	cpi	r24, 0x0D	; 13
     2bc:	31 f7       	brne	.-52     	; 0x28a <receivePassword+0x30>
		i++;
		password[i]=UART_recieveByte();
	}
}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	cf 91       	pop	r28
     2c6:	df 91       	pop	r29
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <EEPROM_write>:

void EEPROM_write(uint16 address, uint8 *password){
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <EEPROM_write+0x6>
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <EEPROM_write+0x8>
     2d6:	0f 92       	push	r0
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	9b 83       	std	Y+3, r25	; 0x03
     2de:	8a 83       	std	Y+2, r24	; 0x02
     2e0:	7d 83       	std	Y+5, r23	; 0x05
     2e2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
     2e4:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_writeByte((address+i),password[i]);
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	9b 81       	ldd	r25, Y+3	; 0x03
     2f0:	a9 01       	movw	r20, r18
     2f2:	48 0f       	add	r20, r24
     2f4:	59 1f       	adc	r21, r25
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	28 2f       	mov	r18, r24
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	8c 81       	ldd	r24, Y+4	; 0x04
     2fe:	9d 81       	ldd	r25, Y+5	; 0x05
     300:	fc 01       	movw	r30, r24
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	20 81       	ld	r18, Z
     308:	ca 01       	movw	r24, r20
     30a:	62 2f       	mov	r22, r18
     30c:	0e 94 c6 03 	call	0x78c	; 0x78c <EEPROM_writeByte>
     310:	18 c0       	rjmp	.+48     	; 0x342 <EEPROM_write+0x74>
	while(password[i]!=13){
		i++;
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_writeByte((address+i),password[i]);
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	28 2f       	mov	r18, r24
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	a9 01       	movw	r20, r18
     324:	48 0f       	add	r20, r24
     326:	59 1f       	adc	r21, r25
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	28 2f       	mov	r18, r24
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	8c 81       	ldd	r24, Y+4	; 0x04
     330:	9d 81       	ldd	r25, Y+5	; 0x05
     332:	fc 01       	movw	r30, r24
     334:	e2 0f       	add	r30, r18
     336:	f3 1f       	adc	r31, r19
     338:	20 81       	ld	r18, Z
     33a:	ca 01       	movw	r24, r20
     33c:	62 2f       	mov	r22, r18
     33e:	0e 94 c6 03 	call	0x78c	; 0x78c <EEPROM_writeByte>
}

void EEPROM_write(uint16 address, uint8 *password){
	uint8 i=0;
	EEPROM_writeByte((address+i),password[i]);
	while(password[i]!=13){
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	8c 81       	ldd	r24, Y+4	; 0x04
     34a:	9d 81       	ldd	r25, Y+5	; 0x05
     34c:	fc 01       	movw	r30, r24
     34e:	e2 0f       	add	r30, r18
     350:	f3 1f       	adc	r31, r19
     352:	80 81       	ld	r24, Z
     354:	8d 30       	cpi	r24, 0x0D	; 13
     356:	e9 f6       	brne	.-70     	; 0x312 <EEPROM_write+0x44>
		i++;
		EEPROM_writeByte((address+i),password[i]);
	}
}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <EEPROM_read>:

void EEPROM_read(uint16 address, uint8 *password){
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	00 d0       	rcall	.+0      	; 0x36e <EEPROM_read+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <EEPROM_read+0x8>
     370:	0f 92       	push	r0
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9b 83       	std	Y+3, r25	; 0x03
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	7d 83       	std	Y+5, r23	; 0x05
     37c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
     37e:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readByte((address+i),password[i]);
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	9b 81       	ldd	r25, Y+3	; 0x03
     38a:	a9 01       	movw	r20, r18
     38c:	48 0f       	add	r20, r24
     38e:	59 1f       	adc	r21, r25
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	8c 81       	ldd	r24, Y+4	; 0x04
     398:	9d 81       	ldd	r25, Y+5	; 0x05
     39a:	fc 01       	movw	r30, r24
     39c:	e2 0f       	add	r30, r18
     39e:	f3 1f       	adc	r31, r19
     3a0:	80 81       	ld	r24, Z
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	9c 01       	movw	r18, r24
     3a8:	ca 01       	movw	r24, r20
     3aa:	b9 01       	movw	r22, r18
     3ac:	0e 94 07 04 	call	0x80e	; 0x80e <EEPROM_readByte>
     3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <EEPROM_read+0x80>
	while(password[i]!=13){
		i++;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
     3b6:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_readByte((address+i),password[i]);
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	9b 81       	ldd	r25, Y+3	; 0x03
     3c2:	a9 01       	movw	r20, r18
     3c4:	48 0f       	add	r20, r24
     3c6:	59 1f       	adc	r21, r25
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	8c 81       	ldd	r24, Y+4	; 0x04
     3d0:	9d 81       	ldd	r25, Y+5	; 0x05
     3d2:	fc 01       	movw	r30, r24
     3d4:	e2 0f       	add	r30, r18
     3d6:	f3 1f       	adc	r31, r19
     3d8:	80 81       	ld	r24, Z
     3da:	88 2f       	mov	r24, r24
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9c 01       	movw	r18, r24
     3e0:	ca 01       	movw	r24, r20
     3e2:	b9 01       	movw	r22, r18
     3e4:	0e 94 07 04 	call	0x80e	; 0x80e <EEPROM_readByte>
}

void EEPROM_read(uint16 address, uint8 *password){
	uint8 i=0;
	EEPROM_readByte((address+i),password[i]);
	while(password[i]!=13){
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	28 2f       	mov	r18, r24
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	8c 81       	ldd	r24, Y+4	; 0x04
     3f0:	9d 81       	ldd	r25, Y+5	; 0x05
     3f2:	fc 01       	movw	r30, r24
     3f4:	e2 0f       	add	r30, r18
     3f6:	f3 1f       	adc	r31, r19
     3f8:	80 81       	ld	r24, Z
     3fa:	8d 30       	cpi	r24, 0x0D	; 13
     3fc:	d1 f6       	brne	.-76     	; 0x3b2 <EEPROM_read+0x4a>
		i++;
		EEPROM_readByte((address+i),password[i]);
	}
}
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <check_passwords>:

uint8 check_passwords(uint8 *password, uint8 *password_2){
     40e:	df 93       	push	r29
     410:	cf 93       	push	r28
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	27 97       	sbiw	r28, 0x07	; 7
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	9c 83       	std	Y+4, r25	; 0x04
     424:	8b 83       	std	Y+3, r24	; 0x03
     426:	7e 83       	std	Y+6, r23	; 0x06
     428:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i=0,j=0;
     42a:	1a 82       	std	Y+2, r1	; 0x02
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	1a c0       	rjmp	.+52     	; 0x464 <check_passwords+0x56>
	while(password[i]!=13){
		if(password[i]==password_2[i]){
     430:	8a 81       	ldd	r24, Y+2	; 0x02
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	9c 81       	ldd	r25, Y+4	; 0x04
     43a:	fc 01       	movw	r30, r24
     43c:	e2 0f       	add	r30, r18
     43e:	f3 1f       	adc	r31, r19
     440:	40 81       	ld	r20, Z
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	9e 81       	ldd	r25, Y+6	; 0x06
     44c:	fc 01       	movw	r30, r24
     44e:	e2 0f       	add	r30, r18
     450:	f3 1f       	adc	r31, r19
     452:	80 81       	ld	r24, Z
     454:	48 17       	cp	r20, r24
     456:	19 f4       	brne	.+6      	; 0x45e <check_passwords+0x50>
			j++;
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	89 83       	std	Y+1, r24	; 0x01
		}
		i++;
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	8a 83       	std	Y+2, r24	; 0x02
	}
}

uint8 check_passwords(uint8 *password, uint8 *password_2){
	uint8 i=0,j=0;
	while(password[i]!=13){
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	9c 81       	ldd	r25, Y+4	; 0x04
     46e:	fc 01       	movw	r30, r24
     470:	e2 0f       	add	r30, r18
     472:	f3 1f       	adc	r31, r19
     474:	80 81       	ld	r24, Z
     476:	8d 30       	cpi	r24, 0x0D	; 13
     478:	d9 f6       	brne	.-74     	; 0x430 <check_passwords+0x22>
		if(password[i]==password_2[i]){
			j++;
		}
		i++;
	}
	if(j==i){
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	98 17       	cp	r25, r24
     480:	19 f4       	brne	.+6      	; 0x488 <check_passwords+0x7a>
		return SUCCESS;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	8f 83       	std	Y+7, r24	; 0x07
     486:	01 c0       	rjmp	.+2      	; 0x48a <check_passwords+0x7c>
	}
	else{
		return FAILURE;
     488:	1f 82       	std	Y+7, r1	; 0x07
     48a:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
     48c:	27 96       	adiw	r28, 0x07	; 7
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	08 95       	ret

0000049e <main>:

void main(void){
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	e8 97       	sbiw	r28, 0x38	; 56
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61

	uint8 master_state, password[PASS_SIZE], password_2[PASS_SIZE];

	UART_ConfigType CONTROL_UART_Config={BIT_8, PARITY_DISABLED, STOP_ONE, 9600};
     4b2:	9e 01       	movw	r18, r28
     4b4:	2a 5e       	subi	r18, 0xEA	; 234
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	3b a7       	std	Y+43, r19	; 0x2b
     4ba:	2a a7       	std	Y+42, r18	; 0x2a
     4bc:	8b e6       	ldi	r24, 0x6B	; 107
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9d a7       	std	Y+45, r25	; 0x2d
     4c2:	8c a7       	std	Y+44, r24	; 0x2c
     4c4:	97 e0       	ldi	r25, 0x07	; 7
     4c6:	9e a7       	std	Y+46, r25	; 0x2e
     4c8:	ec a5       	ldd	r30, Y+44	; 0x2c
     4ca:	fd a5       	ldd	r31, Y+45	; 0x2d
     4cc:	00 80       	ld	r0, Z
     4ce:	2c a5       	ldd	r18, Y+44	; 0x2c
     4d0:	3d a5       	ldd	r19, Y+45	; 0x2d
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
     4d6:	3d a7       	std	Y+45, r19	; 0x2d
     4d8:	2c a7       	std	Y+44, r18	; 0x2c
     4da:	ea a5       	ldd	r30, Y+42	; 0x2a
     4dc:	fb a5       	ldd	r31, Y+43	; 0x2b
     4de:	00 82       	st	Z, r0
     4e0:	2a a5       	ldd	r18, Y+42	; 0x2a
     4e2:	3b a5       	ldd	r19, Y+43	; 0x2b
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	3b a7       	std	Y+43, r19	; 0x2b
     4ea:	2a a7       	std	Y+42, r18	; 0x2a
     4ec:	3e a5       	ldd	r19, Y+46	; 0x2e
     4ee:	31 50       	subi	r19, 0x01	; 1
     4f0:	3e a7       	std	Y+46, r19	; 0x2e
     4f2:	8e a5       	ldd	r24, Y+46	; 0x2e
     4f4:	88 23       	and	r24, r24
     4f6:	41 f7       	brne	.-48     	; 0x4c8 <main+0x2a>
	Timer1_ConfigType CONTROL_Timer1_Config={INITIAL_ZERO, 15625, F_CPU_64, CTC_OCR1A};
     4f8:	fe 01       	movw	r30, r28
     4fa:	7d 96       	adiw	r30, 0x1d	; 29
     4fc:	f8 ab       	std	Y+48, r31	; 0x30
     4fe:	ef a7       	std	Y+47, r30	; 0x2f
     500:	25 e6       	ldi	r18, 0x65	; 101
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	3a ab       	std	Y+50, r19	; 0x32
     506:	29 ab       	std	Y+49, r18	; 0x31
     508:	36 e0       	ldi	r19, 0x06	; 6
     50a:	3b ab       	std	Y+51, r19	; 0x33
     50c:	e9 a9       	ldd	r30, Y+49	; 0x31
     50e:	fa a9       	ldd	r31, Y+50	; 0x32
     510:	00 80       	ld	r0, Z
     512:	29 a9       	ldd	r18, Y+49	; 0x31
     514:	3a a9       	ldd	r19, Y+50	; 0x32
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	3a ab       	std	Y+50, r19	; 0x32
     51c:	29 ab       	std	Y+49, r18	; 0x31
     51e:	ef a5       	ldd	r30, Y+47	; 0x2f
     520:	f8 a9       	ldd	r31, Y+48	; 0x30
     522:	00 82       	st	Z, r0
     524:	2f a5       	ldd	r18, Y+47	; 0x2f
     526:	38 a9       	ldd	r19, Y+48	; 0x30
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	38 ab       	std	Y+48, r19	; 0x30
     52e:	2f a7       	std	Y+47, r18	; 0x2f
     530:	3b a9       	ldd	r19, Y+51	; 0x33
     532:	31 50       	subi	r19, 0x01	; 1
     534:	3b ab       	std	Y+51, r19	; 0x33
     536:	8b a9       	ldd	r24, Y+51	; 0x33
     538:	88 23       	and	r24, r24
     53a:	41 f7       	brne	.-48     	; 0x50c <main+0x6e>
	TWI_ConfigType CONTROL_TWI_Config={0x01, 400000};
     53c:	fe 01       	movw	r30, r28
     53e:	b3 96       	adiw	r30, 0x23	; 35
     540:	fd ab       	std	Y+53, r31	; 0x35
     542:	ec ab       	std	Y+52, r30	; 0x34
     544:	20 e6       	ldi	r18, 0x60	; 96
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	3f ab       	std	Y+55, r19	; 0x37
     54a:	2e ab       	std	Y+54, r18	; 0x36
     54c:	35 e0       	ldi	r19, 0x05	; 5
     54e:	38 af       	std	Y+56, r19	; 0x38
     550:	ee a9       	ldd	r30, Y+54	; 0x36
     552:	ff a9       	ldd	r31, Y+55	; 0x37
     554:	00 80       	ld	r0, Z
     556:	2e a9       	ldd	r18, Y+54	; 0x36
     558:	3f a9       	ldd	r19, Y+55	; 0x37
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	3f ab       	std	Y+55, r19	; 0x37
     560:	2e ab       	std	Y+54, r18	; 0x36
     562:	ec a9       	ldd	r30, Y+52	; 0x34
     564:	fd a9       	ldd	r31, Y+53	; 0x35
     566:	00 82       	st	Z, r0
     568:	2c a9       	ldd	r18, Y+52	; 0x34
     56a:	3d a9       	ldd	r19, Y+53	; 0x35
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	3d ab       	std	Y+53, r19	; 0x35
     572:	2c ab       	std	Y+52, r18	; 0x34
     574:	38 ad       	ldd	r19, Y+56	; 0x38
     576:	31 50       	subi	r19, 0x01	; 1
     578:	38 af       	std	Y+56, r19	; 0x38
     57a:	88 ad       	ldd	r24, Y+56	; 0x38
     57c:	88 23       	and	r24, r24
     57e:	41 f7       	brne	.-48     	; 0x550 <main+0xb2>

	SET_BIT(SREG, 7);
     580:	af e5       	ldi	r26, 0x5F	; 95
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	ef e5       	ldi	r30, 0x5F	; 95
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 68       	ori	r24, 0x80	; 128
     58c:	8c 93       	st	X, r24

	Timer1_setCallBack(CONTROL_edgeProcessing);
     58e:	81 e2       	ldi	r24, 0x21	; 33
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 8a 09 	call	0x1314	; 0x1314 <Timer1_setCallBack>

	DcMotor_Init();
     596:	0e 94 8d 00 	call	0x11a	; 0x11a <DcMotor_Init>
	Buzzer_init();
     59a:	0e 94 9d 03 	call	0x73a	; 0x73a <Buzzer_init>
	UART_init(&CONTROL_UART_Config);
     59e:	ce 01       	movw	r24, r28
     5a0:	46 96       	adiw	r24, 0x16	; 22
     5a2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <UART_init>
	Timer1_init(&CONTROL_Timer1_Config);
     5a6:	ce 01       	movw	r24, r28
     5a8:	4d 96       	adiw	r24, 0x1d	; 29
     5aa:	0e 94 3e 08 	call	0x107c	; 0x107c <Timer1_init>
	TWI_init(&CONTROL_TWI_Config);
     5ae:	ce 01       	movw	r24, r28
     5b0:	83 96       	adiw	r24, 0x23	; 35
     5b2:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_init>

	while(1){
		master_state=UART_recieveByte();
     5b6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
     5ba:	89 83       	std	Y+1, r24	; 0x01
		switch(master_state){
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	e8 2f       	mov	r30, r24
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	f9 a7       	std	Y+41, r31	; 0x29
     5c4:	e8 a7       	std	Y+40, r30	; 0x28
     5c6:	28 a5       	ldd	r18, Y+40	; 0x28
     5c8:	39 a5       	ldd	r19, Y+41	; 0x29
     5ca:	22 30       	cpi	r18, 0x02	; 2
     5cc:	31 05       	cpc	r19, r1
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x134>
     5d0:	68 c0       	rjmp	.+208    	; 0x6a2 <main+0x204>
     5d2:	88 a5       	ldd	r24, Y+40	; 0x28
     5d4:	99 a5       	ldd	r25, Y+41	; 0x29
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	91 05       	cpc	r25, r1
     5da:	54 f4       	brge	.+20     	; 0x5f0 <main+0x152>
     5dc:	e8 a5       	ldd	r30, Y+40	; 0x28
     5de:	f9 a5       	ldd	r31, Y+41	; 0x29
     5e0:	30 97       	sbiw	r30, 0x00	; 0
     5e2:	c9 f0       	breq	.+50     	; 0x616 <main+0x178>
     5e4:	28 a5       	ldd	r18, Y+40	; 0x28
     5e6:	39 a5       	ldd	r19, Y+41	; 0x29
     5e8:	21 30       	cpi	r18, 0x01	; 1
     5ea:	31 05       	cpc	r19, r1
     5ec:	b9 f1       	breq	.+110    	; 0x65c <main+0x1be>
     5ee:	e3 cf       	rjmp	.-58     	; 0x5b6 <main+0x118>
     5f0:	88 a5       	ldd	r24, Y+40	; 0x28
     5f2:	99 a5       	ldd	r25, Y+41	; 0x29
     5f4:	84 30       	cpi	r24, 0x04	; 4
     5f6:	91 05       	cpc	r25, r1
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x15e>
     5fa:	77 c0       	rjmp	.+238    	; 0x6ea <main+0x24c>
     5fc:	e8 a5       	ldd	r30, Y+40	; 0x28
     5fe:	f9 a5       	ldd	r31, Y+41	; 0x29
     600:	e4 30       	cpi	r30, 0x04	; 4
     602:	f1 05       	cpc	r31, r1
     604:	0c f4       	brge	.+2      	; 0x608 <main+0x16a>
     606:	5f c0       	rjmp	.+190    	; 0x6c6 <main+0x228>
     608:	28 a5       	ldd	r18, Y+40	; 0x28
     60a:	39 a5       	ldd	r19, Y+41	; 0x29
     60c:	25 30       	cpi	r18, 0x05	; 5
     60e:	31 05       	cpc	r19, r1
     610:	09 f4       	brne	.+2      	; 0x614 <main+0x176>
     612:	7d c0       	rjmp	.+250    	; 0x70e <main+0x270>
     614:	d0 cf       	rjmp	.-96     	; 0x5b6 <main+0x118>
		case WRITE_PASS:
			receivePassword(password);
     616:	ce 01       	movw	r24, r28
     618:	02 96       	adiw	r24, 0x02	; 2
     61a:	0e 94 2d 01 	call	0x25a	; 0x25a <receivePassword>
			receivePassword(password_2);
     61e:	ce 01       	movw	r24, r28
     620:	0c 96       	adiw	r24, 0x0c	; 12
     622:	0e 94 2d 01 	call	0x25a	; 0x25a <receivePassword>
			g_check=check_passwords(password, password_2);
     626:	ce 01       	movw	r24, r28
     628:	02 96       	adiw	r24, 0x02	; 2
     62a:	9e 01       	movw	r18, r28
     62c:	24 5f       	subi	r18, 0xF4	; 244
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	b9 01       	movw	r22, r18
     632:	0e 94 07 02 	call	0x40e	; 0x40e <check_passwords>
     636:	80 93 76 00 	sts	0x0076, r24
			if(g_check==SUCCESS){
     63a:	80 91 76 00 	lds	r24, 0x0076
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	41 f4       	brne	.+16     	; 0x652 <main+0x1b4>
				EEPROM_write(ADDRESS_USED, password);
     642:	9e 01       	movw	r18, r28
     644:	2e 5f       	subi	r18, 0xFE	; 254
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	81 e1       	ldi	r24, 0x11	; 17
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	b9 01       	movw	r22, r18
     64e:	0e 94 67 01 	call	0x2ce	; 0x2ce <EEPROM_write>
			}
			UART_sendByte(g_check);
     652:	80 91 76 00 	lds	r24, 0x0076
     656:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
     65a:	ad cf       	rjmp	.-166    	; 0x5b6 <main+0x118>
			break;
		case CHECK_PASS:
			receivePassword(password);
     65c:	ce 01       	movw	r24, r28
     65e:	02 96       	adiw	r24, 0x02	; 2
     660:	0e 94 2d 01 	call	0x25a	; 0x25a <receivePassword>
			EEPROM_read(ADDRESS_USED, password_2);
     664:	9e 01       	movw	r18, r28
     666:	24 5f       	subi	r18, 0xF4	; 244
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	81 e1       	ldi	r24, 0x11	; 17
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	b9 01       	movw	r22, r18
     670:	0e 94 b4 01 	call	0x368	; 0x368 <EEPROM_read>
			g_check=check_passwords(password, password_2);
     674:	ce 01       	movw	r24, r28
     676:	02 96       	adiw	r24, 0x02	; 2
     678:	9e 01       	movw	r18, r28
     67a:	24 5f       	subi	r18, 0xF4	; 244
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
     67e:	b9 01       	movw	r22, r18
     680:	0e 94 07 02 	call	0x40e	; 0x40e <check_passwords>
     684:	80 93 76 00 	sts	0x0076, r24
			UART_sendByte(g_check);
     688:	80 91 76 00 	lds	r24, 0x0076
     68c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
			if(g_check==SUCCESS){
     690:	80 91 76 00 	lds	r24, 0x0076
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	09 f0       	breq	.+2      	; 0x69a <main+0x1fc>
     698:	8e cf       	rjmp	.-228    	; 0x5b6 <main+0x118>
				master_state=UART_recieveByte();
     69a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	8a cf       	rjmp	.-236    	; 0x5b6 <main+0x118>
			}
			break;
		case BUZZER_ACT:
			Buzzer_on();
     6a2:	0e 94 ae 03 	call	0x75c	; 0x75c <Buzzer_on>
			Timer1_init(&CONTROL_Timer1_Config);
     6a6:	ce 01       	movw	r24, r28
     6a8:	4d 96       	adiw	r24, 0x1d	; 29
     6aa:	0e 94 3e 08 	call	0x107c	; 0x107c <Timer1_init>
			while(g_secs_count<BUZZER_TIME);
     6ae:	80 91 72 00 	lds	r24, 0x0072
     6b2:	8c 33       	cpi	r24, 0x3C	; 60
     6b4:	e0 f3       	brcs	.-8      	; 0x6ae <main+0x210>
			g_secs_count=0;
     6b6:	10 92 72 00 	sts	0x0072, r1
			Buzzer_off();
     6ba:	0e 94 ba 03 	call	0x774	; 0x774 <Buzzer_off>
			UART_sendByte(COMMAND_DONE);
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
     6c4:	78 cf       	rjmp	.-272    	; 0x5b6 <main+0x118>
			break;
		case DC_MOTOR_ACT1:
			DcMotor_Rotate(CW,100);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	64 e6       	ldi	r22, 0x64	; 100
     6ca:	0e 94 a8 00 	call	0x150	; 0x150 <DcMotor_Rotate>
			Timer1_init(&CONTROL_Timer1_Config);
     6ce:	ce 01       	movw	r24, r28
     6d0:	4d 96       	adiw	r24, 0x1d	; 29
     6d2:	0e 94 3e 08 	call	0x107c	; 0x107c <Timer1_init>
			while(g_secs_count<DOOR_UNLOCKING);
     6d6:	80 91 72 00 	lds	r24, 0x0072
     6da:	8f 30       	cpi	r24, 0x0F	; 15
     6dc:	e0 f3       	brcs	.-8      	; 0x6d6 <main+0x238>
			g_secs_count=0;
     6de:	10 92 72 00 	sts	0x0072, r1
			UART_sendByte(COMMAND_DONE);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
     6e8:	66 cf       	rjmp	.-308    	; 0x5b6 <main+0x118>
			break;
		case DC_MOTOR_ACT2:
			DcMotor_Rotate(STOP,0);
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	0e 94 a8 00 	call	0x150	; 0x150 <DcMotor_Rotate>
			Timer1_init(&CONTROL_Timer1_Config);
     6f2:	ce 01       	movw	r24, r28
     6f4:	4d 96       	adiw	r24, 0x1d	; 29
     6f6:	0e 94 3e 08 	call	0x107c	; 0x107c <Timer1_init>
			while(g_secs_count<DOOR_HOLD);
     6fa:	80 91 72 00 	lds	r24, 0x0072
     6fe:	83 30       	cpi	r24, 0x03	; 3
     700:	e0 f3       	brcs	.-8      	; 0x6fa <main+0x25c>
			g_secs_count=0;
     702:	10 92 72 00 	sts	0x0072, r1
			UART_sendByte(COMMAND_DONE);
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
     70c:	54 cf       	rjmp	.-344    	; 0x5b6 <main+0x118>
			break;
		case DC_MOTOR_ACT3:
			DcMotor_Rotate(A_CW,100);
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	64 e6       	ldi	r22, 0x64	; 100
     712:	0e 94 a8 00 	call	0x150	; 0x150 <DcMotor_Rotate>
			Timer1_init(&CONTROL_Timer1_Config);
     716:	ce 01       	movw	r24, r28
     718:	4d 96       	adiw	r24, 0x1d	; 29
     71a:	0e 94 3e 08 	call	0x107c	; 0x107c <Timer1_init>
			while(g_secs_count<DOOR_LOCKING);
     71e:	80 91 72 00 	lds	r24, 0x0072
     722:	8f 30       	cpi	r24, 0x0F	; 15
     724:	e0 f3       	brcs	.-8      	; 0x71e <main+0x280>
			g_secs_count=0;
     726:	10 92 72 00 	sts	0x0072, r1
			DcMotor_Rotate(STOP,0);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	0e 94 a8 00 	call	0x150	; 0x150 <DcMotor_Rotate>
			UART_sendByte(COMMAND_DONE);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
     738:	3e cf       	rjmp	.-388    	; 0x5b6 <main+0x118>

0000073a <Buzzer_init>:
/*
 * Description :
 * 1- Setup the direction for the buzzer pin as output pin through the GPIO driver
 * 2- Turn off the buzzer through the GPIO
 */
void Buzzer_init(void){
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	67 e0       	ldi	r22, 0x07	; 7
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	67 e0       	ldi	r22, 0x07	; 7
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
}
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <Buzzer_on>:

/*
 * Description :
 * Function to enable the Buzzer through the GPIO
 */
void Buzzer_on(void){
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	67 e0       	ldi	r22, 0x07	; 7
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
}
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <Buzzer_off>:

/*
 * Description :
 * Function to disable the Buzzer through the GPIO
 */
void Buzzer_off(void){
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	67 e0       	ldi	r22, 0x07	; 7
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	0e 94 52 05 	call	0xaa4	; 0xaa4 <GPIO_writePin>
}
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	08 95       	ret

0000078c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	00 d0       	rcall	.+0      	; 0x792 <EEPROM_writeByte+0x6>
     792:	00 d0       	rcall	.+0      	; 0x794 <EEPROM_writeByte+0x8>
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     79e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     7a2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     7a6:	88 30       	cpi	r24, 0x08	; 8
     7a8:	11 f0       	breq	.+4      	; 0x7ae <EEPROM_writeByte+0x22>
        return ERROR;
     7aa:	1c 82       	std	Y+4, r1	; 0x04
     7ac:	28 c0       	rjmp	.+80     	; 0x7fe <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	80 70       	andi	r24, 0x00	; 0
     7b4:	97 70       	andi	r25, 0x07	; 7
     7b6:	88 0f       	add	r24, r24
     7b8:	89 2f       	mov	r24, r25
     7ba:	88 1f       	adc	r24, r24
     7bc:	99 0b       	sbc	r25, r25
     7be:	91 95       	neg	r25
     7c0:	80 6a       	ori	r24, 0xA0	; 160
     7c2:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     7c6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     7ca:	88 31       	cpi	r24, 0x18	; 24
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <EEPROM_writeByte+0x46>
        return ERROR; 
     7ce:	1c 82       	std	Y+4, r1	; 0x04
     7d0:	16 c0       	rjmp	.+44     	; 0x7fe <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     7d8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     7dc:	88 32       	cpi	r24, 0x28	; 40
     7de:	11 f0       	breq	.+4      	; 0x7e4 <EEPROM_writeByte+0x58>
        return ERROR;
     7e0:	1c 82       	std	Y+4, r1	; 0x04
     7e2:	0d c0       	rjmp	.+26     	; 0x7fe <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     7ea:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     7ee:	88 32       	cpi	r24, 0x28	; 40
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <EEPROM_writeByte+0x6a>
        return ERROR;
     7f2:	1c 82       	std	Y+4, r1	; 0x04
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     7f6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_stop>
	
    return SUCCESS;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	8c 83       	std	Y+4, r24	; 0x04
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
}
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	00 d0       	rcall	.+0      	; 0x814 <EEPROM_readByte+0x6>
     814:	00 d0       	rcall	.+0      	; 0x816 <EEPROM_readByte+0x8>
     816:	0f 92       	push	r0
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	7c 83       	std	Y+4, r23	; 0x04
     822:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     824:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     828:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     82c:	88 30       	cpi	r24, 0x08	; 8
     82e:	11 f0       	breq	.+4      	; 0x834 <EEPROM_readByte+0x26>
        return ERROR;
     830:	1d 82       	std	Y+5, r1	; 0x05
     832:	44 c0       	rjmp	.+136    	; 0x8bc <__stack+0x5d>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	80 70       	andi	r24, 0x00	; 0
     83a:	97 70       	andi	r25, 0x07	; 7
     83c:	88 0f       	add	r24, r24
     83e:	89 2f       	mov	r24, r25
     840:	88 1f       	adc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	91 95       	neg	r25
     846:	80 6a       	ori	r24, 0xA0	; 160
     848:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     84c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     850:	88 31       	cpi	r24, 0x18	; 24
     852:	11 f0       	breq	.+4      	; 0x858 <EEPROM_readByte+0x4a>
        return ERROR;
     854:	1d 82       	std	Y+5, r1	; 0x05
     856:	32 c0       	rjmp	.+100    	; 0x8bc <__stack+0x5d>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     85e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     862:	88 32       	cpi	r24, 0x28	; 40
     864:	11 f0       	breq	.+4      	; 0x86a <__stack+0xb>
        return ERROR;
     866:	1d 82       	std	Y+5, r1	; 0x05
     868:	29 c0       	rjmp	.+82     	; 0x8bc <__stack+0x5d>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     86a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     86e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     872:	80 31       	cpi	r24, 0x10	; 16
     874:	11 f0       	breq	.+4      	; 0x87a <__stack+0x1b>
        return ERROR;
     876:	1d 82       	std	Y+5, r1	; 0x05
     878:	21 c0       	rjmp	.+66     	; 0x8bc <__stack+0x5d>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	80 70       	andi	r24, 0x00	; 0
     880:	97 70       	andi	r25, 0x07	; 7
     882:	88 0f       	add	r24, r24
     884:	89 2f       	mov	r24, r25
     886:	88 1f       	adc	r24, r24
     888:	99 0b       	sbc	r25, r25
     88a:	91 95       	neg	r25
     88c:	81 6a       	ori	r24, 0xA1	; 161
     88e:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     892:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     896:	80 34       	cpi	r24, 0x40	; 64
     898:	11 f0       	breq	.+4      	; 0x89e <__stack+0x3f>
        return ERROR;
     89a:	1d 82       	std	Y+5, r1	; 0x05
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <__stack+0x5d>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     89e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <TWI_readByteWithNACK>
     8a2:	eb 81       	ldd	r30, Y+3	; 0x03
     8a4:	fc 81       	ldd	r31, Y+4	; 0x04
     8a6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     8a8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <TWI_getStatus>
     8ac:	88 35       	cpi	r24, 0x58	; 88
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <__stack+0x55>
        return ERROR;
     8b0:	1d 82       	std	Y+5, r1	; 0x05
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__stack+0x5d>

    /* Send the Stop Bit */
    TWI_stop();
     8b4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_stop>

    return SUCCESS;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8d 83       	std	Y+5, r24	; 0x05
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <GPIO_setupPinDirection+0x6>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <GPIO_setupPinDirection+0x8>
     8d6:	0f 92       	push	r0
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	6a 83       	std	Y+2, r22	; 0x02
     8e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	88 30       	cpi	r24, 0x08	; 8
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <GPIO_setupPinDirection+0x1c>
     8e8:	d5 c0       	rjmp	.+426    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <GPIO_setupPinDirection+0x24>
     8f0:	d1 c0       	rjmp	.+418    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	3d 83       	std	Y+5, r19	; 0x05
     8fa:	2c 83       	std	Y+4, r18	; 0x04
     8fc:	8c 81       	ldd	r24, Y+4	; 0x04
     8fe:	9d 81       	ldd	r25, Y+5	; 0x05
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	91 05       	cpc	r25, r1
     904:	09 f4       	brne	.+2      	; 0x908 <GPIO_setupPinDirection+0x3a>
     906:	43 c0       	rjmp	.+134    	; 0x98e <GPIO_setupPinDirection+0xc0>
     908:	2c 81       	ldd	r18, Y+4	; 0x04
     90a:	3d 81       	ldd	r19, Y+5	; 0x05
     90c:	22 30       	cpi	r18, 0x02	; 2
     90e:	31 05       	cpc	r19, r1
     910:	2c f4       	brge	.+10     	; 0x91c <GPIO_setupPinDirection+0x4e>
     912:	8c 81       	ldd	r24, Y+4	; 0x04
     914:	9d 81       	ldd	r25, Y+5	; 0x05
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	71 f0       	breq	.+28     	; 0x936 <GPIO_setupPinDirection+0x68>
     91a:	bc c0       	rjmp	.+376    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
     91c:	2c 81       	ldd	r18, Y+4	; 0x04
     91e:	3d 81       	ldd	r19, Y+5	; 0x05
     920:	22 30       	cpi	r18, 0x02	; 2
     922:	31 05       	cpc	r19, r1
     924:	09 f4       	brne	.+2      	; 0x928 <GPIO_setupPinDirection+0x5a>
     926:	5f c0       	rjmp	.+190    	; 0x9e6 <GPIO_setupPinDirection+0x118>
     928:	8c 81       	ldd	r24, Y+4	; 0x04
     92a:	9d 81       	ldd	r25, Y+5	; 0x05
     92c:	83 30       	cpi	r24, 0x03	; 3
     92e:	91 05       	cpc	r25, r1
     930:	09 f4       	brne	.+2      	; 0x934 <GPIO_setupPinDirection+0x66>
     932:	85 c0       	rjmp	.+266    	; 0xa3e <GPIO_setupPinDirection+0x170>
     934:	af c0       	rjmp	.+350    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	a1 f4       	brne	.+40     	; 0x964 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     93c:	aa e3       	ldi	r26, 0x3A	; 58
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	ea e3       	ldi	r30, 0x3A	; 58
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	48 2f       	mov	r20, r24
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	28 2f       	mov	r18, r24
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 2e       	mov	r0, r18
     954:	02 c0       	rjmp	.+4      	; 0x95a <GPIO_setupPinDirection+0x8c>
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	0a 94       	dec	r0
     95c:	e2 f7       	brpl	.-8      	; 0x956 <GPIO_setupPinDirection+0x88>
     95e:	84 2b       	or	r24, r20
     960:	8c 93       	st	X, r24
     962:	98 c0       	rjmp	.+304    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     964:	aa e3       	ldi	r26, 0x3A	; 58
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	ea e3       	ldi	r30, 0x3A	; 58
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	48 2f       	mov	r20, r24
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 2e       	mov	r0, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <GPIO_setupPinDirection+0xb4>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <GPIO_setupPinDirection+0xb0>
     986:	80 95       	com	r24
     988:	84 23       	and	r24, r20
     98a:	8c 93       	st	X, r24
     98c:	83 c0       	rjmp	.+262    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	a1 f4       	brne	.+40     	; 0x9bc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     994:	a7 e3       	ldi	r26, 0x37	; 55
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e7 e3       	ldi	r30, 0x37	; 55
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	48 2f       	mov	r20, r24
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	28 2f       	mov	r18, r24
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	02 2e       	mov	r0, r18
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <GPIO_setupPinDirection+0xe4>
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	0a 94       	dec	r0
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <GPIO_setupPinDirection+0xe0>
     9b6:	84 2b       	or	r24, r20
     9b8:	8c 93       	st	X, r24
     9ba:	6c c0       	rjmp	.+216    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     9bc:	a7 e3       	ldi	r26, 0x37	; 55
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e7 e3       	ldi	r30, 0x37	; 55
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	48 2f       	mov	r20, r24
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	28 2f       	mov	r18, r24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 2e       	mov	r0, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <GPIO_setupPinDirection+0x10c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	0a 94       	dec	r0
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <GPIO_setupPinDirection+0x108>
     9de:	80 95       	com	r24
     9e0:	84 23       	and	r24, r20
     9e2:	8c 93       	st	X, r24
     9e4:	57 c0       	rjmp	.+174    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	a1 f4       	brne	.+40     	; 0xa14 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     9ec:	a4 e3       	ldi	r26, 0x34	; 52
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e4 e3       	ldi	r30, 0x34	; 52
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	48 2f       	mov	r20, r24
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	02 2e       	mov	r0, r18
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <GPIO_setupPinDirection+0x13c>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	0a 94       	dec	r0
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <GPIO_setupPinDirection+0x138>
     a0e:	84 2b       	or	r24, r20
     a10:	8c 93       	st	X, r24
     a12:	40 c0       	rjmp	.+128    	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     a14:	a4 e3       	ldi	r26, 0x34	; 52
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	e4 e3       	ldi	r30, 0x34	; 52
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	48 2f       	mov	r20, r24
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	28 2f       	mov	r18, r24
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 2e       	mov	r0, r18
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <GPIO_setupPinDirection+0x164>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	0a 94       	dec	r0
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <GPIO_setupPinDirection+0x160>
     a36:	80 95       	com	r24
     a38:	84 23       	and	r24, r20
     a3a:	8c 93       	st	X, r24
     a3c:	2b c0       	rjmp	.+86     	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	a1 f4       	brne	.+40     	; 0xa6c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     a44:	a1 e3       	ldi	r26, 0x31	; 49
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e1 e3       	ldi	r30, 0x31	; 49
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	48 2f       	mov	r20, r24
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	28 2f       	mov	r18, r24
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	02 2e       	mov	r0, r18
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <GPIO_setupPinDirection+0x194>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	0a 94       	dec	r0
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <GPIO_setupPinDirection+0x190>
     a66:	84 2b       	or	r24, r20
     a68:	8c 93       	st	X, r24
     a6a:	14 c0       	rjmp	.+40     	; 0xa94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     a6c:	a1 e3       	ldi	r26, 0x31	; 49
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e1 e3       	ldi	r30, 0x31	; 49
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	48 2f       	mov	r20, r24
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 2e       	mov	r0, r18
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <GPIO_setupPinDirection+0x1bc>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <GPIO_setupPinDirection+0x1b8>
     a8e:	80 95       	com	r24
     a90:	84 23       	and	r24, r20
     a92:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	cf 91       	pop	r28
     aa0:	df 91       	pop	r29
     aa2:	08 95       	ret

00000aa4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <GPIO_writePin+0x6>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <GPIO_writePin+0x8>
     aac:	0f 92       	push	r0
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	6a 83       	std	Y+2, r22	; 0x02
     ab6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	88 30       	cpi	r24, 0x08	; 8
     abc:	08 f0       	brcs	.+2      	; 0xac0 <GPIO_writePin+0x1c>
     abe:	d5 c0       	rjmp	.+426    	; 0xc6a <GPIO_writePin+0x1c6>
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <GPIO_writePin+0x24>
     ac6:	d1 c0       	rjmp	.+418    	; 0xc6a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	28 2f       	mov	r18, r24
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	3d 83       	std	Y+5, r19	; 0x05
     ad0:	2c 83       	std	Y+4, r18	; 0x04
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	91 05       	cpc	r25, r1
     ada:	09 f4       	brne	.+2      	; 0xade <GPIO_writePin+0x3a>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <GPIO_writePin+0xc0>
     ade:	2c 81       	ldd	r18, Y+4	; 0x04
     ae0:	3d 81       	ldd	r19, Y+5	; 0x05
     ae2:	22 30       	cpi	r18, 0x02	; 2
     ae4:	31 05       	cpc	r19, r1
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <GPIO_writePin+0x4e>
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	9d 81       	ldd	r25, Y+5	; 0x05
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	71 f0       	breq	.+28     	; 0xb0c <GPIO_writePin+0x68>
     af0:	bc c0       	rjmp	.+376    	; 0xc6a <GPIO_writePin+0x1c6>
     af2:	2c 81       	ldd	r18, Y+4	; 0x04
     af4:	3d 81       	ldd	r19, Y+5	; 0x05
     af6:	22 30       	cpi	r18, 0x02	; 2
     af8:	31 05       	cpc	r19, r1
     afa:	09 f4       	brne	.+2      	; 0xafe <GPIO_writePin+0x5a>
     afc:	5f c0       	rjmp	.+190    	; 0xbbc <GPIO_writePin+0x118>
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	91 05       	cpc	r25, r1
     b06:	09 f4       	brne	.+2      	; 0xb0a <GPIO_writePin+0x66>
     b08:	85 c0       	rjmp	.+266    	; 0xc14 <GPIO_writePin+0x170>
     b0a:	af c0       	rjmp	.+350    	; 0xc6a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	a1 f4       	brne	.+40     	; 0xb3a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     b12:	ab e3       	ldi	r26, 0x3B	; 59
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	eb e3       	ldi	r30, 0x3B	; 59
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	48 2f       	mov	r20, r24
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 2e       	mov	r0, r18
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <GPIO_writePin+0x8c>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	0a 94       	dec	r0
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <GPIO_writePin+0x88>
     b34:	84 2b       	or	r24, r20
     b36:	8c 93       	st	X, r24
     b38:	98 c0       	rjmp	.+304    	; 0xc6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     b3a:	ab e3       	ldi	r26, 0x3B	; 59
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	eb e3       	ldi	r30, 0x3B	; 59
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	48 2f       	mov	r20, r24
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	02 2e       	mov	r0, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <GPIO_writePin+0xb4>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	0a 94       	dec	r0
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <GPIO_writePin+0xb0>
     b5c:	80 95       	com	r24
     b5e:	84 23       	and	r24, r20
     b60:	8c 93       	st	X, r24
     b62:	83 c0       	rjmp	.+262    	; 0xc6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	a1 f4       	brne	.+40     	; 0xb92 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     b6a:	a8 e3       	ldi	r26, 0x38	; 56
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 e3       	ldi	r30, 0x38	; 56
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	48 2f       	mov	r20, r24
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 2e       	mov	r0, r18
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <GPIO_writePin+0xe4>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	0a 94       	dec	r0
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <GPIO_writePin+0xe0>
     b8c:	84 2b       	or	r24, r20
     b8e:	8c 93       	st	X, r24
     b90:	6c c0       	rjmp	.+216    	; 0xc6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     b92:	a8 e3       	ldi	r26, 0x38	; 56
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e8 e3       	ldi	r30, 0x38	; 56
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	48 2f       	mov	r20, r24
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 2e       	mov	r0, r18
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <GPIO_writePin+0x10c>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <GPIO_writePin+0x108>
     bb4:	80 95       	com	r24
     bb6:	84 23       	and	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	57 c0       	rjmp	.+174    	; 0xc6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	a1 f4       	brne	.+40     	; 0xbea <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     bc2:	a5 e3       	ldi	r26, 0x35	; 53
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e5 e3       	ldi	r30, 0x35	; 53
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <GPIO_writePin+0x13c>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <GPIO_writePin+0x138>
     be4:	84 2b       	or	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	40 c0       	rjmp	.+128    	; 0xc6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     bea:	a5 e3       	ldi	r26, 0x35	; 53
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e5 e3       	ldi	r30, 0x35	; 53
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <GPIO_writePin+0x164>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <GPIO_writePin+0x160>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	2b c0       	rjmp	.+86     	; 0xc6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	a1 f4       	brne	.+40     	; 0xc42 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     c1a:	a2 e3       	ldi	r26, 0x32	; 50
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e2 e3       	ldi	r30, 0x32	; 50
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <GPIO_writePin+0x194>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <GPIO_writePin+0x190>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     c42:	a2 e3       	ldi	r26, 0x32	; 50
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e2 e3       	ldi	r30, 0x32	; 50
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	48 2f       	mov	r20, r24
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 2e       	mov	r0, r18
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <GPIO_writePin+0x1bc>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <GPIO_writePin+0x1b8>
     c64:	80 95       	com	r24
     c66:	84 23       	and	r24, r20
     c68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <GPIO_readPin+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <GPIO_readPin+0x8>
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     c8c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	88 30       	cpi	r24, 0x08	; 8
     c92:	08 f0       	brcs	.+2      	; 0xc96 <GPIO_readPin+0x1c>
     c94:	84 c0       	rjmp	.+264    	; 0xd9e <GPIO_readPin+0x124>
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	84 30       	cpi	r24, 0x04	; 4
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <GPIO_readPin+0x24>
     c9c:	80 c0       	rjmp	.+256    	; 0xd9e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	3d 83       	std	Y+5, r19	; 0x05
     ca6:	2c 83       	std	Y+4, r18	; 0x04
     ca8:	4c 81       	ldd	r20, Y+4	; 0x04
     caa:	5d 81       	ldd	r21, Y+5	; 0x05
     cac:	41 30       	cpi	r20, 0x01	; 1
     cae:	51 05       	cpc	r21, r1
     cb0:	79 f1       	breq	.+94     	; 0xd10 <GPIO_readPin+0x96>
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	91 05       	cpc	r25, r1
     cba:	34 f4       	brge	.+12     	; 0xcc8 <GPIO_readPin+0x4e>
     cbc:	2c 81       	ldd	r18, Y+4	; 0x04
     cbe:	3d 81       	ldd	r19, Y+5	; 0x05
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	69 f0       	breq	.+26     	; 0xce0 <GPIO_readPin+0x66>
     cc6:	6b c0       	rjmp	.+214    	; 0xd9e <GPIO_readPin+0x124>
     cc8:	4c 81       	ldd	r20, Y+4	; 0x04
     cca:	5d 81       	ldd	r21, Y+5	; 0x05
     ccc:	42 30       	cpi	r20, 0x02	; 2
     cce:	51 05       	cpc	r21, r1
     cd0:	b9 f1       	breq	.+110    	; 0xd40 <GPIO_readPin+0xc6>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <GPIO_readPin+0x64>
     cdc:	49 c0       	rjmp	.+146    	; 0xd70 <GPIO_readPin+0xf6>
     cde:	5f c0       	rjmp	.+190    	; 0xd9e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     ce0:	e9 e3       	ldi	r30, 0x39	; 57
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a9 01       	movw	r20, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <GPIO_readPin+0x7e>
     cf4:	55 95       	asr	r21
     cf6:	47 95       	ror	r20
     cf8:	8a 95       	dec	r24
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <GPIO_readPin+0x7a>
     cfc:	ca 01       	movw	r24, r20
     cfe:	81 70       	andi	r24, 0x01	; 1
     d00:	90 70       	andi	r25, 0x00	; 0
     d02:	88 23       	and	r24, r24
     d04:	19 f0       	breq	.+6      	; 0xd0c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	49 c0       	rjmp	.+146    	; 0xd9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d0c:	19 82       	std	Y+1, r1	; 0x01
     d0e:	47 c0       	rjmp	.+142    	; 0xd9e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     d10:	e6 e3       	ldi	r30, 0x36	; 54
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a9 01       	movw	r20, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <GPIO_readPin+0xae>
     d24:	55 95       	asr	r21
     d26:	47 95       	ror	r20
     d28:	8a 95       	dec	r24
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <GPIO_readPin+0xaa>
     d2c:	ca 01       	movw	r24, r20
     d2e:	81 70       	andi	r24, 0x01	; 1
     d30:	90 70       	andi	r25, 0x00	; 0
     d32:	88 23       	and	r24, r24
     d34:	19 f0       	breq	.+6      	; 0xd3c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	31 c0       	rjmp	.+98     	; 0xd9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	2f c0       	rjmp	.+94     	; 0xd9e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     d40:	e3 e3       	ldi	r30, 0x33	; 51
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	a9 01       	movw	r20, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <GPIO_readPin+0xde>
     d54:	55 95       	asr	r21
     d56:	47 95       	ror	r20
     d58:	8a 95       	dec	r24
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <GPIO_readPin+0xda>
     d5c:	ca 01       	movw	r24, r20
     d5e:	81 70       	andi	r24, 0x01	; 1
     d60:	90 70       	andi	r25, 0x00	; 0
     d62:	88 23       	and	r24, r24
     d64:	19 f0       	breq	.+6      	; 0xd6c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	19 c0       	rjmp	.+50     	; 0xd9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d6c:	19 82       	std	Y+1, r1	; 0x01
     d6e:	17 c0       	rjmp	.+46     	; 0xd9e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     d70:	e0 e3       	ldi	r30, 0x30	; 48
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a9 01       	movw	r20, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_readPin+0x10e>
     d84:	55 95       	asr	r21
     d86:	47 95       	ror	r20
     d88:	8a 95       	dec	r24
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_readPin+0x10a>
     d8c:	ca 01       	movw	r24, r20
     d8e:	81 70       	andi	r24, 0x01	; 1
     d90:	90 70       	andi	r25, 0x00	; 0
     d92:	88 23       	and	r24, r24
     d94:	19 f0       	breq	.+6      	; 0xd9c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d9c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <GPIO_setupPortDirection+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <GPIO_setupPortDirection+0x8>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	84 30       	cpi	r24, 0x04	; 4
     dc4:	90 f5       	brcc	.+100    	; 0xe2a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3c 83       	std	Y+4, r19	; 0x04
     dce:	2b 83       	std	Y+3, r18	; 0x03
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <GPIO_setupPortDirection+0x5e>
     dda:	2b 81       	ldd	r18, Y+3	; 0x03
     ddc:	3c 81       	ldd	r19, Y+4	; 0x04
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <GPIO_setupPortDirection+0x3e>
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	61 f0       	breq	.+24     	; 0xe04 <GPIO_setupPortDirection+0x54>
     dec:	1e c0       	rjmp	.+60     	; 0xe2a <GPIO_setupPortDirection+0x7a>
     dee:	2b 81       	ldd	r18, Y+3	; 0x03
     df0:	3c 81       	ldd	r19, Y+4	; 0x04
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	81 f0       	breq	.+32     	; 0xe18 <GPIO_setupPortDirection+0x68>
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	81 f0       	breq	.+32     	; 0xe22 <GPIO_setupPortDirection+0x72>
     e02:	13 c0       	rjmp	.+38     	; 0xe2a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     e04:	ea e3       	ldi	r30, 0x3A	; 58
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	80 83       	st	Z, r24
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	80 83       	st	Z, r24
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     e18:	e4 e3       	ldi	r30, 0x34	; 52
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	80 83       	st	Z, r24
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	80 83       	st	Z, r24
			break;
		}
	}
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <GPIO_writePort+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <GPIO_writePort+0x8>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	90 f5       	brcc	.+100    	; 0xeb2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3c 83       	std	Y+4, r19	; 0x04
     e56:	2b 83       	std	Y+3, r18	; 0x03
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	d1 f0       	breq	.+52     	; 0xe96 <GPIO_writePort+0x5e>
     e62:	2b 81       	ldd	r18, Y+3	; 0x03
     e64:	3c 81       	ldd	r19, Y+4	; 0x04
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <GPIO_writePort+0x3e>
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	61 f0       	breq	.+24     	; 0xe8c <GPIO_writePort+0x54>
     e74:	1e c0       	rjmp	.+60     	; 0xeb2 <GPIO_writePort+0x7a>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	81 f0       	breq	.+32     	; 0xea0 <GPIO_writePort+0x68>
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	81 f0       	breq	.+32     	; 0xeaa <GPIO_writePort+0x72>
     e8a:	13 c0       	rjmp	.+38     	; 0xeb2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     e8c:	eb e3       	ldi	r30, 0x3B	; 59
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	80 83       	st	Z, r24
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     e96:	e8 e3       	ldi	r30, 0x38	; 56
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	80 83       	st	Z, r24
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     ea0:	e5 e3       	ldi	r30, 0x35	; 53
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	80 83       	st	Z, r24
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     eaa:	e2 e3       	ldi	r30, 0x32	; 50
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	80 83       	st	Z, r24
			break;
		}
	}
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <GPIO_readPort+0x6>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <GPIO_readPort+0x8>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     ece:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	90 f5       	brcc	.+100    	; 0xf3a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3c 83       	std	Y+4, r19	; 0x04
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	d1 f0       	breq	.+52     	; 0xf1e <GPIO_readPort+0x5e>
     eea:	2b 81       	ldd	r18, Y+3	; 0x03
     eec:	3c 81       	ldd	r19, Y+4	; 0x04
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <GPIO_readPort+0x3e>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <GPIO_readPort+0x54>
     efc:	1e c0       	rjmp	.+60     	; 0xf3a <GPIO_readPort+0x7a>
     efe:	2b 81       	ldd	r18, Y+3	; 0x03
     f00:	3c 81       	ldd	r19, Y+4	; 0x04
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	81 f0       	breq	.+32     	; 0xf28 <GPIO_readPort+0x68>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	81 f0       	breq	.+32     	; 0xf32 <GPIO_readPort+0x72>
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     f14:	e9 e3       	ldi	r30, 0x39	; 57
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     f1e:	e6 e3       	ldi	r30, 0x36	; 54
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     f28:	e3 e3       	ldi	r30, 0x33	; 51
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     f32:	e0 e3       	ldi	r30, 0x30	; 48
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect){
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     f74:	80 91 73 00 	lds	r24, 0x0073
     f78:	90 91 74 00 	lds	r25, 0x0074
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	29 f0       	breq	.+10     	; 0xf8a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f80:	e0 91 73 00 	lds	r30, 0x0073
     f84:	f0 91 74 00 	lds	r31, 0x0074
     f88:	09 95       	icall
	}
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_7>:


ISR(TIMER1_COMPA_vect){
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     fda:	80 91 73 00 	lds	r24, 0x0073
     fde:	90 91 74 00 	lds	r25, 0x0074
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	29 f0       	breq	.+10     	; 0xff0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     fe6:	e0 91 73 00 	lds	r30, 0x0073
     fea:	f0 91 74 00 	lds	r31, 0x0074
     fee:	09 95       	icall
	}
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1040:	80 91 73 00 	lds	r24, 0x0073
    1044:	90 91 74 00 	lds	r25, 0x0074
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	29 f0       	breq	.+10     	; 0x1056 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    104c:	e0 91 73 00 	lds	r30, 0x0073
    1050:	f0 91 74 00 	lds	r31, 0x0074
    1054:	09 95       	icall
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <Timer1_init>:

/*
 * Description :
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <Timer1_init+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <Timer1_init+0x8>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <Timer1_init+0xa>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
	/*Timer initialization
	 * Mode Selection
	 * Prescaler Assignment
	 * Zeroing Clock
	 */
	TCCR1A=(((Config_Ptr->mode)&0b0011)<<WGM10);
    108e:	af e4       	ldi	r26, 0x4F	; 79
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	85 81       	ldd	r24, Z+5	; 0x05
    1098:	83 70       	andi	r24, 0x03	; 3
    109a:	8c 93       	st	X, r24
	TCCR1B=(((Config_Ptr->mode)&0b1100)<<WGM12) | ((Config_Ptr->prescaler)<<CS10);
    109c:	ae e4       	ldi	r26, 0x4E	; 78
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	85 81       	ldd	r24, Z+5	; 0x05
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	8c 70       	andi	r24, 0x0C	; 12
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	98 2f       	mov	r25, r24
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	84 81       	ldd	r24, Z+4	; 0x04
    10c2:	89 2b       	or	r24, r25
    10c4:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    10c6:	ac e4       	ldi	r26, 0x4C	; 76
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	11 96       	adiw	r26, 0x01	; 1
    10d4:	9c 93       	st	X, r25
    10d6:	8e 93       	st	-X, r24

	/*Initializing PWM-dependant bits*/
	switch(Config_Ptr->mode){
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	85 81       	ldd	r24, Z+5	; 0x05
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3e 83       	std	Y+6, r19	; 0x06
    10e4:	2d 83       	std	Y+5, r18	; 0x05
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	88 30       	cpi	r24, 0x08	; 8
    10ec:	91 05       	cpc	r25, r1
    10ee:	84 f4       	brge	.+32     	; 0x1110 <Timer1_init+0x94>
    10f0:	2d 81       	ldd	r18, Y+5	; 0x05
    10f2:	3e 81       	ldd	r19, Y+6	; 0x06
    10f4:	25 30       	cpi	r18, 0x05	; 5
    10f6:	31 05       	cpc	r19, r1
    10f8:	24 f5       	brge	.+72     	; 0x1142 <Timer1_init+0xc6>
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	74 f1       	brlt	.+92     	; 0x1160 <Timer1_init+0xe4>
    1104:	2d 81       	ldd	r18, Y+5	; 0x05
    1106:	3e 81       	ldd	r19, Y+6	; 0x06
    1108:	24 30       	cpi	r18, 0x04	; 4
    110a:	31 05       	cpc	r19, r1
    110c:	14 f1       	brlt	.+68     	; 0x1152 <Timer1_init+0xd6>
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <Timer1_init+0xb6>
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	8c 30       	cpi	r24, 0x0C	; 12
    1116:	91 05       	cpc	r25, r1
    1118:	61 f0       	breq	.+24     	; 0x1132 <Timer1_init+0xb6>
    111a:	2d 81       	ldd	r18, Y+5	; 0x05
    111c:	3e 81       	ldd	r19, Y+6	; 0x06
    111e:	2c 30       	cpi	r18, 0x0C	; 12
    1120:	31 05       	cpc	r19, r1
    1122:	bc f0       	brlt	.+46     	; 0x1152 <Timer1_init+0xd6>
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	0e 97       	sbiw	r24, 0x0e	; 14
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	91 05       	cpc	r25, r1
    112e:	c0 f4       	brcc	.+48     	; 0x1160 <Timer1_init+0xe4>
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <Timer1_init+0xc6>
		case CTC_OCR1A:
		case CTC_ICR1:
			TCCR1A|= (1<<FOC1A) | (1<<COM1A1) | (1<<COM1A0);	/*Set OC1A, Non-PWM*/
    1132:	af e4       	ldi	r26, 0x4F	; 79
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e4       	ldi	r30, 0x4F	; 79
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 6c       	ori	r24, 0xC8	; 200
    113e:	8c 93       	st	X, r24
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <Timer1_init+0xe4>
		case FAST_PWM_8_BIT:
		case FAST_PWM_9_BIT:
		case FAST_PWM_10_BIT:
		case FAST_PWM_OCR1A:
		case FAST_PWM_ICR1:
			SET_BIT(TCCR1A, COM1A1);							/*Non-inverting mode, FAST PWM*/
    1142:	af e4       	ldi	r26, 0x4F	; 79
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ef e4       	ldi	r30, 0x4F	; 79
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	8c 93       	st	X, r24
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <Timer1_init+0xe4>
		case PWM_PHASE_10_BIT:
		case PWM_PHASE_AND_FREQ_OCR1A:
		case PWM_PHASE_OCR1A:
		case PWM_PHASE_AND_FREQ_ICR1:
		case PWM_PHASE_ICR1:
			TCCR1A|= (1<<COM1A1) | (1<<COM1A0);					/*Set OC1A, Phase Correct or Phase and Frequency Correct PWM*/
    1152:	af e4       	ldi	r26, 0x4F	; 79
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ef e4       	ldi	r30, 0x4F	; 79
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 6c       	ori	r24, 0xC0	; 192
    115e:	8c 93       	st	X, r24
		default:
			break;
	}

	/*Initializing mode-dependant bits*/
	switch(Config_Ptr->mode){
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	85 81       	ldd	r24, Z+5	; 0x05
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3c 83       	std	Y+4, r19	; 0x04
    116c:	2b 83       	std	Y+3, r18	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	89 30       	cpi	r24, 0x09	; 9
    1174:	91 05       	cpc	r25, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <Timer1_init+0xfe>
    1178:	45 c0       	rjmp	.+138    	; 0x1204 <Timer1_init+0x188>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	2a 30       	cpi	r18, 0x0A	; 10
    1180:	31 05       	cpc	r19, r1
    1182:	84 f4       	brge	.+32     	; 0x11a4 <Timer1_init+0x128>
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	88 30       	cpi	r24, 0x08	; 8
    118a:	91 05       	cpc	r25, r1
    118c:	0c f0       	brlt	.+2      	; 0x1190 <Timer1_init+0x114>
    118e:	53 c0       	rjmp	.+166    	; 0x1236 <Timer1_init+0x1ba>
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	ac f5       	brge	.+106    	; 0x1204 <Timer1_init+0x188>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	11 f1       	breq	.+68     	; 0x11e6 <Timer1_init+0x16a>
    11a2:	68 c0       	rjmp	.+208    	; 0x1274 <Timer1_init+0x1f8>
    11a4:	2b 81       	ldd	r18, Y+3	; 0x03
    11a6:	3c 81       	ldd	r19, Y+4	; 0x04
    11a8:	2c 30       	cpi	r18, 0x0C	; 12
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <Timer1_init+0x134>
    11ae:	43 c0       	rjmp	.+134    	; 0x1236 <Timer1_init+0x1ba>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	8d 30       	cpi	r24, 0x0D	; 13
    11b6:	91 05       	cpc	r25, r1
    11b8:	5c f4       	brge	.+22     	; 0x11d0 <Timer1_init+0x154>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	2a 30       	cpi	r18, 0x0A	; 10
    11c0:	31 05       	cpc	r19, r1
    11c2:	c9 f1       	breq	.+114    	; 0x1236 <Timer1_init+0x1ba>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	8b 30       	cpi	r24, 0x0B	; 11
    11ca:	91 05       	cpc	r25, r1
    11cc:	d9 f0       	breq	.+54     	; 0x1204 <Timer1_init+0x188>
    11ce:	52 c0       	rjmp	.+164    	; 0x1274 <Timer1_init+0x1f8>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	2e 30       	cpi	r18, 0x0E	; 14
    11d6:	31 05       	cpc	r19, r1
    11d8:	71 f1       	breq	.+92     	; 0x1236 <Timer1_init+0x1ba>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	8f 30       	cpi	r24, 0x0F	; 15
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <Timer1_init+0x188>
    11e4:	47 c0       	rjmp	.+142    	; 0x1274 <Timer1_init+0x1f8>
		case NORMAL:
			GPIO_setupPinDirection(OVF_PORT_ID, OVF_PIN_ID, PIN_OUTPUT);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>
			SET_BIT(TIMSK,TOIE1);
    11f0:	a9 e5       	ldi	r26, 0x59	; 89
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e9 e5       	ldi	r30, 0x59	; 89
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	8c 93       	st	X, r24
			g_timer_mode=MODE_NORMAL;
    11fe:	10 92 75 00 	sts	0x0075, r1
    1202:	38 c0       	rjmp	.+112    	; 0x1274 <Timer1_init+0x1f8>
		case FAST_PWM_9_BIT:
		case FAST_PWM_10_BIT:
		case PWM_PHASE_AND_FREQ_OCR1A:
		case PWM_PHASE_OCR1A:
		case FAST_PWM_OCR1A:
			GPIO_setupPinDirection(COMP_A_PORT_ID, COMP_A_PIN_ID, PIN_OUTPUT);
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	64 e0       	ldi	r22, 0x04	; 4
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>
			OCR1A=Config_Ptr->compare_value;
    120e:	aa e4       	ldi	r26, 0x4A	; 74
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	9c 93       	st	X, r25
    121e:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A);
    1220:	a9 e5       	ldi	r26, 0x59	; 89
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e9 e5       	ldi	r30, 0x59	; 89
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 61       	ori	r24, 0x10	; 16
    122c:	8c 93       	st	X, r24
			g_timer_mode=MODE_COMPARE;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 75 00 	sts	0x0075, r24
    1234:	1f c0       	rjmp	.+62     	; 0x1274 <Timer1_init+0x1f8>
			break;
		case PWM_PHASE_AND_FREQ_ICR1:
		case PWM_PHASE_ICR1:
		case CTC_ICR1:
		case FAST_PWM_ICR1:
			GPIO_setupPinDirection(ICU_PORT_ID, ICU_PIN_ID, PIN_OUTPUT);
    1236:	83 e0       	ldi	r24, 0x03	; 3
    1238:	66 e0       	ldi	r22, 0x06	; 6
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 67 04 	call	0x8ce	; 0x8ce <GPIO_setupPinDirection>
			ICR1=Config_Ptr->compare_value;
    1240:	a6 e4       	ldi	r26, 0x46	; 70
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e9 81       	ldd	r30, Y+1	; 0x01
    1246:	fa 81       	ldd	r31, Y+2	; 0x02
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	9c 93       	st	X, r25
    1250:	8e 93       	st	-X, r24
			SET_BIT(TCCR1B, ICES1);
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TICIE1);
    1260:	a9 e5       	ldi	r26, 0x59	; 89
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e9 e5       	ldi	r30, 0x59	; 89
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	8c 93       	st	X, r24
			g_timer_mode=MODE_ICU;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	80 93 75 00 	sts	0x0075, r24
			break;
		default:
			break;
	}
}
    1274:	26 96       	adiw	r28, 0x06	; 6
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <Timer1_deInit>:

/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <Timer1_deInit+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1290:	ef e4       	ldi	r30, 0x4F	; 79
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
	TCCR1B = 0;
    1296:	ee e4       	ldi	r30, 0x4E	; 78
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
	TCNT1 = 0;
    129c:	ec e4       	ldi	r30, 0x4C	; 76
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	11 82       	std	Z+1, r1	; 0x01
    12a2:	10 82       	st	Z, r1

	/*Clear Timer Registers*/
	switch(g_timer_mode){
    12a4:	80 91 75 00 	lds	r24, 0x0075
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3a 83       	std	Y+2, r19	; 0x02
    12ae:	29 83       	std	Y+1, r18	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	89 f0       	breq	.+34     	; 0x12dc <Timer1_deInit+0x56>
    12ba:	29 81       	ldd	r18, Y+1	; 0x01
    12bc:	3a 81       	ldd	r19, Y+2	; 0x02
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <Timer1_deInit+0x6e>
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	f9 f4       	brne	.+62     	; 0x130a <Timer1_deInit+0x84>
		case MODE_NORMAL:
			CLEAR_BIT(TIMSK,TOIE1);
    12cc:	a9 e5       	ldi	r26, 0x59	; 89
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e9 e5       	ldi	r30, 0x59	; 89
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8b 7f       	andi	r24, 0xFB	; 251
    12d8:	8c 93       	st	X, r24
    12da:	17 c0       	rjmp	.+46     	; 0x130a <Timer1_deInit+0x84>
			break;
		case MODE_COMPARE:
			OCR1A=0;
    12dc:	ea e4       	ldi	r30, 0x4A	; 74
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	11 82       	std	Z+1, r1	; 0x01
    12e2:	10 82       	st	Z, r1
			CLEAR_BIT(TIMSK,OCIE1A);
    12e4:	a9 e5       	ldi	r26, 0x59	; 89
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e9 e5       	ldi	r30, 0x59	; 89
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8f 7e       	andi	r24, 0xEF	; 239
    12f0:	8c 93       	st	X, r24
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <Timer1_deInit+0x84>
			break;
		case MODE_ICU:
			ICR1 = 0;
    12f4:	e6 e4       	ldi	r30, 0x46	; 70
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	11 82       	std	Z+1, r1	; 0x01
    12fa:	10 82       	st	Z, r1
			CLEAR_BIT(TIMSK,TICIE1);
    12fc:	a9 e5       	ldi	r26, 0x59	; 89
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e9 e5       	ldi	r30, 0x59	; 89
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 7d       	andi	r24, 0xDF	; 223
    1308:	8c 93       	st	X, r24
			break;
	}
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <Timer1_setCallBack>:

/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <Timer1_setCallBack+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	90 93 74 00 	sts	0x0074, r25
    132a:	80 93 73 00 	sts	0x0073, r24
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <TWI_init>:
#include "common_macros.h"
#include <math.h>
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <TWI_init+0xe>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <TWI_init+0x10>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 bit_rate_in;
	uint8 prescaler;
	/*This section is used to know which prescaler to use*/
	if((Config_Ptr->bit_rate)>(F_CPU/(16+2*255*pow(4,PRESCALER_1)))){
    1350:	eb 81       	ldd	r30, Y+3	; 0x03
    1352:	fc 81       	ldd	r31, Y+4	; 0x04
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	92 81       	ldd	r25, Z+2	; 0x02
    1358:	a3 81       	ldd	r26, Z+3	; 0x03
    135a:	b4 81       	ldd	r27, Z+4	; 0x04
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	20 e8       	ldi	r18, 0x80	; 128
    136e:	34 ea       	ldi	r19, 0xA4	; 164
    1370:	4d e6       	ldi	r20, 0x6D	; 109
    1372:	56 e4       	ldi	r21, 0x46	; 70
    1374:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__gesf2>
    1378:	18 16       	cp	r1, r24
    137a:	14 f4       	brge	.+4      	; 0x1380 <TWI_init+0x48>
		prescaler=PRESCALER_1;				/*This is the least bit rate using prescaler 1*/
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	4a c0       	rjmp	.+148    	; 0x1414 <TWI_init+0xdc>
	}
	else if((Config_Ptr->bit_rate)>(F_CPU/(16+2*255*pow(4,PRESCALER_4)))){
    1380:	eb 81       	ldd	r30, Y+3	; 0x03
    1382:	fc 81       	ldd	r31, Y+4	; 0x04
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	92 81       	ldd	r25, Z+2	; 0x02
    1388:	a3 81       	ldd	r26, Z+3	; 0x03
    138a:	b4 81       	ldd	r27, Z+4	; 0x04
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	2f ec       	ldi	r18, 0xCF	; 207
    139e:	30 e3       	ldi	r19, 0x30	; 48
    13a0:	43 e7       	ldi	r20, 0x73	; 115
    13a2:	55 e4       	ldi	r21, 0x45	; 69
    13a4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__gesf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	1c f4       	brge	.+6      	; 0x13b2 <TWI_init+0x7a>
		prescaler=PRESCALER_4;				/*This is the least bit rate using prescaler 4*/
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	31 c0       	rjmp	.+98     	; 0x1414 <TWI_init+0xdc>
	}
	else if((Config_Ptr->bit_rate)>(F_CPU/(16+2*255*pow(4,PRESCALER_16)))){
    13b2:	eb 81       	ldd	r30, Y+3	; 0x03
    13b4:	fc 81       	ldd	r31, Y+4	; 0x04
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	92 81       	ldd	r25, Z+2	; 0x02
    13ba:	a3 81       	ldd	r26, Z+3	; 0x03
    13bc:	b4 81       	ldd	r27, Z+4	; 0x04
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	2f e4       	ldi	r18, 0x4F	; 79
    13d0:	3e e9       	ldi	r19, 0x9E	; 158
    13d2:	44 e7       	ldi	r20, 0x74	; 116
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__gesf2>
    13da:	18 16       	cp	r1, r24
    13dc:	1c f4       	brge	.+6      	; 0x13e4 <TWI_init+0xac>
		prescaler=PRESCALER_16;				/*This is the least bit rate using prescaler 16*/
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	18 c0       	rjmp	.+48     	; 0x1414 <TWI_init+0xdc>
	}
	else if((Config_Ptr->bit_rate)>(F_CPU/(16+2*255*pow(4,PRESCALER_64)))){
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	92 81       	ldd	r25, Z+2	; 0x02
    13ec:	a3 81       	ldd	r26, Z+3	; 0x03
    13ee:	b4 81       	ldd	r27, Z+4	; 0x04
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	2b e5       	ldi	r18, 0x5B	; 91
    1402:	3a ef       	ldi	r19, 0xFA	; 250
    1404:	44 e7       	ldi	r20, 0x74	; 116
    1406:	53 e4       	ldi	r21, 0x43	; 67
    1408:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__gesf2>
    140c:	18 16       	cp	r1, r24
    140e:	14 f4       	brge	.+4      	; 0x1414 <TWI_init+0xdc>
		prescaler=PRESCALER_64;				/*This is the least bit rate using prescaler 64*/
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	89 83       	std	Y+1, r24	; 0x01
	}
	else{}
	/*This is the equation used to calculate the bit rate which will be used*/
	bit_rate_in=(uint8)(((F_CPU/(Config_Ptr->bit_rate))-16)/(2*pow(4,prescaler)));
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	21 81       	ldd	r18, Z+1	; 0x01
    141a:	32 81       	ldd	r19, Z+2	; 0x02
    141c:	43 81       	ldd	r20, Z+3	; 0x03
    141e:	54 81       	ldd	r21, Z+4	; 0x04
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	92 e1       	ldi	r25, 0x12	; 18
    1424:	aa e7       	ldi	r26, 0x7A	; 122
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
    1430:	da 01       	movw	r26, r20
    1432:	c9 01       	movw	r24, r18
    1434:	40 97       	sbiw	r24, 0x10	; 16
    1436:	a1 09       	sbc	r26, r1
    1438:	b1 09       	sbc	r27, r1
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    1442:	7b 01       	movw	r14, r22
    1444:	8c 01       	movw	r16, r24
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 c6 0c 	call	0x198c	; 0x198c <__floatunsisf>
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	80 e8       	ldi	r24, 0x80	; 128
    1462:	90 e4       	ldi	r25, 0x40	; 64
    1464:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <pow>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 01       	movw	r18, r24
    146e:	ad 01       	movw	r20, r26
    1470:	ca 01       	movw	r24, r20
    1472:	b9 01       	movw	r22, r18
    1474:	0e 94 ce 0b 	call	0x179c	; 0x179c <__addsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9c 01       	movw	r18, r24
    147e:	ad 01       	movw	r20, r26
    1480:	c8 01       	movw	r24, r16
    1482:	b7 01       	movw	r22, r14
    1484:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8a 83       	std	Y+2, r24	; 0x02
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = bit_rate_in;
    149a:	e0 e2       	ldi	r30, 0x20	; 32
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 83       	st	Z, r24
	TWSR = (prescaler<<TWPS0);
    14a2:	e1 e2       	ldi	r30, 0x21	; 33
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	80 83       	st	Z, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address)<<TWA0); // my address = 0x01 :)
    14aa:	a2 e2       	ldi	r26, 0x22	; 34
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb 81       	ldd	r30, Y+3	; 0x03
    14b0:	fc 81       	ldd	r31, Y+4	; 0x04
    14b2:	80 81       	ld	r24, Z
    14b4:	88 0f       	add	r24, r24
    14b6:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    14b8:	e6 e5       	ldi	r30, 0x56	; 86
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	84 e0       	ldi	r24, 0x04	; 4
    14be:	80 83       	st	Z, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	08 95       	ret

000014d6 <TWI_start>:

void TWI_start(void)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14de:	e6 e5       	ldi	r30, 0x56	; 86
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	84 ea       	ldi	r24, 0xA4	; 164
    14e4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14e6:	e6 e5       	ldi	r30, 0x56	; 86
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 23       	and	r24, r24
    14ee:	dc f7       	brge	.-10     	; 0x14e6 <TWI_start+0x10>
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <TWI_stop>:

void TWI_stop(void)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    14fe:	e6 e5       	ldi	r30, 0x56	; 86
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	84 e9       	ldi	r24, 0x94	; 148
    1504:	80 83       	st	Z, r24
}
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	0f 92       	push	r0
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1518:	e3 e2       	ldi	r30, 0x23	; 35
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1520:	e6 e5       	ldi	r30, 0x56	; 86
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	84 e8       	ldi	r24, 0x84	; 132
    1526:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1528:	e6 e5       	ldi	r30, 0x56	; 86
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	dc f7       	brge	.-10     	; 0x1528 <TWI_writeByte+0x1c>
}
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1542:	e6 e5       	ldi	r30, 0x56	; 86
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	84 ec       	ldi	r24, 0xC4	; 196
    1548:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    154a:	e6 e5       	ldi	r30, 0x56	; 86
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	88 23       	and	r24, r24
    1552:	dc f7       	brge	.-10     	; 0x154a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1554:	e3 e2       	ldi	r30, 0x23	; 35
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1568:	e6 e5       	ldi	r30, 0x56	; 86
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	84 e8       	ldi	r24, 0x84	; 132
    156e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1570:	e6 e5       	ldi	r30, 0x56	; 86
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 23       	and	r24, r24
    1578:	dc f7       	brge	.-10     	; 0x1570 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    157a:	e3 e2       	ldi	r30, 0x23	; 35
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1590:	e1 e2       	ldi	r30, 0x21	; 33
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	88 7f       	andi	r24, 0xF8	; 248
    1598:	89 83       	std	Y+1, r24	; 0x01
    return status;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <UART_init+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <UART_init+0x8>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    15b4:	1a 82       	std	Y+2, r1	; 0x02
    15b6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    15b8:	eb e2       	ldi	r30, 0x2B	; 43
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    15c0:	ea e2       	ldi	r30, 0x2A	; 42
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	88 e1       	ldi	r24, 0x18	; 24
    15c6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity<<UPM0) | (Config_Ptr->stop_bit<<USBS) | (Config_Ptr->bit_data<<UCSZ0) ;
    15c8:	a0 e4       	ldi	r26, 0x40	; 64
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb 81       	ldd	r30, Y+3	; 0x03
    15ce:	fc 81       	ldd	r31, Y+4	; 0x04
    15d0:	81 81       	ldd	r24, Z+1	; 0x01
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	82 95       	swap	r24
    15d8:	92 95       	swap	r25
    15da:	90 7f       	andi	r25, 0xF0	; 240
    15dc:	98 27       	eor	r25, r24
    15de:	80 7f       	andi	r24, 0xF0	; 240
    15e0:	98 27       	eor	r25, r24
    15e2:	28 2f       	mov	r18, r24
    15e4:	20 68       	ori	r18, 0x80	; 128
    15e6:	eb 81       	ldd	r30, Y+3	; 0x03
    15e8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	28 2b       	or	r18, r24
    15fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1600:	fc 81       	ldd	r31, Y+4	; 0x04
    1602:	80 81       	ld	r24, Z
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 2b       	or	r24, r18
    160e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	83 81       	ldd	r24, Z+3	; 0x03
    1616:	94 81       	ldd	r25, Z+4	; 0x04
    1618:	a5 81       	ldd	r26, Z+5	; 0x05
    161a:	b6 81       	ldd	r27, Z+6	; 0x06
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	aa 1f       	adc	r26, r26
    1622:	bb 1f       	adc	r27, r27
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	aa 1f       	adc	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	9c 01       	movw	r18, r24
    1636:	ad 01       	movw	r20, r26
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	92 e1       	ldi	r25, 0x12	; 18
    163c:	aa e7       	ldi	r26, 0x7A	; 122
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
    1648:	da 01       	movw	r26, r20
    164a:	c9 01       	movw	r24, r18
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1652:	e0 e4       	ldi	r30, 0x40	; 64
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	89 2f       	mov	r24, r25
    165c:	99 27       	eor	r25, r25
    165e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1660:	e9 e2       	ldi	r30, 0x29	; 41
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	80 83       	st	Z, r24
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1682:	eb e2       	ldi	r30, 0x2B	; 43
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	80 72       	andi	r24, 0x20	; 32
    168e:	90 70       	andi	r25, 0x00	; 0
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	b9 f3       	breq	.-18     	; 0x1682 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1694:	ec e2       	ldi	r30, 0x2C	; 44
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    16ac:	eb e2       	ldi	r30, 0x2B	; 43
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	dc f7       	brge	.-10     	; 0x16ac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    16b6:	ec e2       	ldi	r30, 0x2C	; 44
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
}
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <UART_sendString+0x6>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16d2:	19 82       	std	Y+1, r1	; 0x01
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	fc 01       	movw	r30, r24
    16e2:	e2 0f       	add	r30, r18
    16e4:	f3 1f       	adc	r31, r19
    16e6:	80 81       	ld	r24, Z
    16e8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_sendByte>
		i++;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	fc 01       	movw	r30, r24
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	80 81       	ld	r24, Z
    1704:	88 23       	and	r24, r24
    1706:	39 f7       	brne	.-50     	; 0x16d6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <UART_receiveString+0xa>
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1728:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	8c 01       	movw	r16, r24
    1736:	02 0f       	add	r16, r18
    1738:	13 1f       	adc	r17, r19
    173a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
    173e:	f8 01       	movw	r30, r16
    1740:	80 83       	st	Z, r24
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	8c 01       	movw	r16, r24
    1756:	02 0f       	add	r16, r18
    1758:	13 1f       	adc	r17, r19
    175a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <UART_recieveByte>
    175e:	f8 01       	movw	r30, r16
    1760:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	fc 01       	movw	r30, r24
    176e:	e2 0f       	add	r30, r18
    1770:	f3 1f       	adc	r31, r19
    1772:	80 81       	ld	r24, Z
    1774:	83 32       	cpi	r24, 0x23	; 35
    1776:	31 f7       	brne	.-52     	; 0x1744 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	fc 01       	movw	r30, r24
    1784:	e2 0f       	add	r30, r18
    1786:	f3 1f       	adc	r31, r19
    1788:	10 82       	st	Z, r1
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <__subsf3>:
    179a:	50 58       	subi	r21, 0x80	; 128

0000179c <__addsf3>:
    179c:	bb 27       	eor	r27, r27
    179e:	aa 27       	eor	r26, r26
    17a0:	0e d0       	rcall	.+28     	; 0x17be <__addsf3x>
    17a2:	48 c1       	rjmp	.+656    	; 0x1a34 <__fp_round>
    17a4:	39 d1       	rcall	.+626    	; 0x1a18 <__fp_pscA>
    17a6:	30 f0       	brcs	.+12     	; 0x17b4 <__addsf3+0x18>
    17a8:	3e d1       	rcall	.+636    	; 0x1a26 <__fp_pscB>
    17aa:	20 f0       	brcs	.+8      	; 0x17b4 <__addsf3+0x18>
    17ac:	31 f4       	brne	.+12     	; 0x17ba <__addsf3+0x1e>
    17ae:	9f 3f       	cpi	r25, 0xFF	; 255
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__addsf3+0x1a>
    17b2:	1e f4       	brtc	.+6      	; 0x17ba <__addsf3+0x1e>
    17b4:	2e c1       	rjmp	.+604    	; 0x1a12 <__fp_nan>
    17b6:	0e f4       	brtc	.+2      	; 0x17ba <__addsf3+0x1e>
    17b8:	e0 95       	com	r30
    17ba:	e7 fb       	bst	r30, 7
    17bc:	24 c1       	rjmp	.+584    	; 0x1a06 <__fp_inf>

000017be <__addsf3x>:
    17be:	e9 2f       	mov	r30, r25
    17c0:	4a d1       	rcall	.+660    	; 0x1a56 <__fp_split3>
    17c2:	80 f3       	brcs	.-32     	; 0x17a4 <__addsf3+0x8>
    17c4:	ba 17       	cp	r27, r26
    17c6:	62 07       	cpc	r22, r18
    17c8:	73 07       	cpc	r23, r19
    17ca:	84 07       	cpc	r24, r20
    17cc:	95 07       	cpc	r25, r21
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <__addsf3x+0x18>
    17d0:	71 f4       	brne	.+28     	; 0x17ee <__addsf3x+0x30>
    17d2:	9e f5       	brtc	.+102    	; 0x183a <__addsf3x+0x7c>
    17d4:	62 c1       	rjmp	.+708    	; 0x1a9a <__fp_zero>
    17d6:	0e f4       	brtc	.+2      	; 0x17da <__addsf3x+0x1c>
    17d8:	e0 95       	com	r30
    17da:	0b 2e       	mov	r0, r27
    17dc:	ba 2f       	mov	r27, r26
    17de:	a0 2d       	mov	r26, r0
    17e0:	0b 01       	movw	r0, r22
    17e2:	b9 01       	movw	r22, r18
    17e4:	90 01       	movw	r18, r0
    17e6:	0c 01       	movw	r0, r24
    17e8:	ca 01       	movw	r24, r20
    17ea:	a0 01       	movw	r20, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	ff 27       	eor	r31, r31
    17f0:	59 1b       	sub	r21, r25
    17f2:	99 f0       	breq	.+38     	; 0x181a <__addsf3x+0x5c>
    17f4:	59 3f       	cpi	r21, 0xF9	; 249
    17f6:	50 f4       	brcc	.+20     	; 0x180c <__addsf3x+0x4e>
    17f8:	50 3e       	cpi	r21, 0xE0	; 224
    17fa:	68 f1       	brcs	.+90     	; 0x1856 <__addsf3x+0x98>
    17fc:	1a 16       	cp	r1, r26
    17fe:	f0 40       	sbci	r31, 0x00	; 0
    1800:	a2 2f       	mov	r26, r18
    1802:	23 2f       	mov	r18, r19
    1804:	34 2f       	mov	r19, r20
    1806:	44 27       	eor	r20, r20
    1808:	58 5f       	subi	r21, 0xF8	; 248
    180a:	f3 cf       	rjmp	.-26     	; 0x17f2 <__addsf3x+0x34>
    180c:	46 95       	lsr	r20
    180e:	37 95       	ror	r19
    1810:	27 95       	ror	r18
    1812:	a7 95       	ror	r26
    1814:	f0 40       	sbci	r31, 0x00	; 0
    1816:	53 95       	inc	r21
    1818:	c9 f7       	brne	.-14     	; 0x180c <__addsf3x+0x4e>
    181a:	7e f4       	brtc	.+30     	; 0x183a <__addsf3x+0x7c>
    181c:	1f 16       	cp	r1, r31
    181e:	ba 0b       	sbc	r27, r26
    1820:	62 0b       	sbc	r22, r18
    1822:	73 0b       	sbc	r23, r19
    1824:	84 0b       	sbc	r24, r20
    1826:	ba f0       	brmi	.+46     	; 0x1856 <__addsf3x+0x98>
    1828:	91 50       	subi	r25, 0x01	; 1
    182a:	a1 f0       	breq	.+40     	; 0x1854 <__addsf3x+0x96>
    182c:	ff 0f       	add	r31, r31
    182e:	bb 1f       	adc	r27, r27
    1830:	66 1f       	adc	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	c2 f7       	brpl	.-16     	; 0x1828 <__addsf3x+0x6a>
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <__addsf3x+0x98>
    183a:	ba 0f       	add	r27, r26
    183c:	62 1f       	adc	r22, r18
    183e:	73 1f       	adc	r23, r19
    1840:	84 1f       	adc	r24, r20
    1842:	48 f4       	brcc	.+18     	; 0x1856 <__addsf3x+0x98>
    1844:	87 95       	ror	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	b7 95       	ror	r27
    184c:	f7 95       	ror	r31
    184e:	9e 3f       	cpi	r25, 0xFE	; 254
    1850:	08 f0       	brcs	.+2      	; 0x1854 <__addsf3x+0x96>
    1852:	b3 cf       	rjmp	.-154    	; 0x17ba <__addsf3+0x1e>
    1854:	93 95       	inc	r25
    1856:	88 0f       	add	r24, r24
    1858:	08 f0       	brcs	.+2      	; 0x185c <__addsf3x+0x9e>
    185a:	99 27       	eor	r25, r25
    185c:	ee 0f       	add	r30, r30
    185e:	97 95       	ror	r25
    1860:	87 95       	ror	r24
    1862:	08 95       	ret

00001864 <__divsf3>:
    1864:	0c d0       	rcall	.+24     	; 0x187e <__divsf3x>
    1866:	e6 c0       	rjmp	.+460    	; 0x1a34 <__fp_round>
    1868:	de d0       	rcall	.+444    	; 0x1a26 <__fp_pscB>
    186a:	40 f0       	brcs	.+16     	; 0x187c <__divsf3+0x18>
    186c:	d5 d0       	rcall	.+426    	; 0x1a18 <__fp_pscA>
    186e:	30 f0       	brcs	.+12     	; 0x187c <__divsf3+0x18>
    1870:	21 f4       	brne	.+8      	; 0x187a <__divsf3+0x16>
    1872:	5f 3f       	cpi	r21, 0xFF	; 255
    1874:	19 f0       	breq	.+6      	; 0x187c <__divsf3+0x18>
    1876:	c7 c0       	rjmp	.+398    	; 0x1a06 <__fp_inf>
    1878:	51 11       	cpse	r21, r1
    187a:	10 c1       	rjmp	.+544    	; 0x1a9c <__fp_szero>
    187c:	ca c0       	rjmp	.+404    	; 0x1a12 <__fp_nan>

0000187e <__divsf3x>:
    187e:	eb d0       	rcall	.+470    	; 0x1a56 <__fp_split3>
    1880:	98 f3       	brcs	.-26     	; 0x1868 <__divsf3+0x4>

00001882 <__divsf3_pse>:
    1882:	99 23       	and	r25, r25
    1884:	c9 f3       	breq	.-14     	; 0x1878 <__divsf3+0x14>
    1886:	55 23       	and	r21, r21
    1888:	b1 f3       	breq	.-20     	; 0x1876 <__divsf3+0x12>
    188a:	95 1b       	sub	r25, r21
    188c:	55 0b       	sbc	r21, r21
    188e:	bb 27       	eor	r27, r27
    1890:	aa 27       	eor	r26, r26
    1892:	62 17       	cp	r22, r18
    1894:	73 07       	cpc	r23, r19
    1896:	84 07       	cpc	r24, r20
    1898:	38 f0       	brcs	.+14     	; 0x18a8 <__divsf3_pse+0x26>
    189a:	9f 5f       	subi	r25, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	44 1f       	adc	r20, r20
    18a4:	aa 1f       	adc	r26, r26
    18a6:	a9 f3       	breq	.-22     	; 0x1892 <__divsf3_pse+0x10>
    18a8:	33 d0       	rcall	.+102    	; 0x1910 <__divsf3_pse+0x8e>
    18aa:	0e 2e       	mov	r0, r30
    18ac:	3a f0       	brmi	.+14     	; 0x18bc <__divsf3_pse+0x3a>
    18ae:	e0 e8       	ldi	r30, 0x80	; 128
    18b0:	30 d0       	rcall	.+96     	; 0x1912 <__divsf3_pse+0x90>
    18b2:	91 50       	subi	r25, 0x01	; 1
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	e6 95       	lsr	r30
    18b8:	00 1c       	adc	r0, r0
    18ba:	ca f7       	brpl	.-14     	; 0x18ae <__divsf3_pse+0x2c>
    18bc:	29 d0       	rcall	.+82     	; 0x1910 <__divsf3_pse+0x8e>
    18be:	fe 2f       	mov	r31, r30
    18c0:	27 d0       	rcall	.+78     	; 0x1910 <__divsf3_pse+0x8e>
    18c2:	66 0f       	add	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	bb 1f       	adc	r27, r27
    18ca:	26 17       	cp	r18, r22
    18cc:	37 07       	cpc	r19, r23
    18ce:	48 07       	cpc	r20, r24
    18d0:	ab 07       	cpc	r26, r27
    18d2:	b0 e8       	ldi	r27, 0x80	; 128
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <__divsf3_pse+0x56>
    18d6:	bb 0b       	sbc	r27, r27
    18d8:	80 2d       	mov	r24, r0
    18da:	bf 01       	movw	r22, r30
    18dc:	ff 27       	eor	r31, r31
    18de:	93 58       	subi	r25, 0x83	; 131
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	2a f0       	brmi	.+10     	; 0x18ee <__divsf3_pse+0x6c>
    18e4:	9e 3f       	cpi	r25, 0xFE	; 254
    18e6:	51 05       	cpc	r21, r1
    18e8:	68 f0       	brcs	.+26     	; 0x1904 <__divsf3_pse+0x82>
    18ea:	8d c0       	rjmp	.+282    	; 0x1a06 <__fp_inf>
    18ec:	d7 c0       	rjmp	.+430    	; 0x1a9c <__fp_szero>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	ec f3       	brlt	.-6      	; 0x18ec <__divsf3_pse+0x6a>
    18f2:	98 3e       	cpi	r25, 0xE8	; 232
    18f4:	dc f3       	brlt	.-10     	; 0x18ec <__divsf3_pse+0x6a>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f7 95       	ror	r31
    1900:	9f 5f       	subi	r25, 0xFF	; 255
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__divsf3_pse+0x74>
    1904:	88 0f       	add	r24, r24
    1906:	91 1d       	adc	r25, r1
    1908:	96 95       	lsr	r25
    190a:	87 95       	ror	r24
    190c:	97 f9       	bld	r25, 7
    190e:	08 95       	ret
    1910:	e1 e0       	ldi	r30, 0x01	; 1
    1912:	66 0f       	add	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	bb 1f       	adc	r27, r27
    191a:	62 17       	cp	r22, r18
    191c:	73 07       	cpc	r23, r19
    191e:	84 07       	cpc	r24, r20
    1920:	ba 07       	cpc	r27, r26
    1922:	20 f0       	brcs	.+8      	; 0x192c <__divsf3_pse+0xaa>
    1924:	62 1b       	sub	r22, r18
    1926:	73 0b       	sbc	r23, r19
    1928:	84 0b       	sbc	r24, r20
    192a:	ba 0b       	sbc	r27, r26
    192c:	ee 1f       	adc	r30, r30
    192e:	88 f7       	brcc	.-30     	; 0x1912 <__divsf3_pse+0x90>
    1930:	e0 95       	com	r30
    1932:	08 95       	ret

00001934 <__fixunssfsi>:
    1934:	98 d0       	rcall	.+304    	; 0x1a66 <__fp_splitA>
    1936:	88 f0       	brcs	.+34     	; 0x195a <__fixunssfsi+0x26>
    1938:	9f 57       	subi	r25, 0x7F	; 127
    193a:	90 f0       	brcs	.+36     	; 0x1960 <__fixunssfsi+0x2c>
    193c:	b9 2f       	mov	r27, r25
    193e:	99 27       	eor	r25, r25
    1940:	b7 51       	subi	r27, 0x17	; 23
    1942:	a0 f0       	brcs	.+40     	; 0x196c <__fixunssfsi+0x38>
    1944:	d1 f0       	breq	.+52     	; 0x197a <__fixunssfsi+0x46>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	1a f0       	brmi	.+6      	; 0x1956 <__fixunssfsi+0x22>
    1950:	ba 95       	dec	r27
    1952:	c9 f7       	brne	.-14     	; 0x1946 <__fixunssfsi+0x12>
    1954:	12 c0       	rjmp	.+36     	; 0x197a <__fixunssfsi+0x46>
    1956:	b1 30       	cpi	r27, 0x01	; 1
    1958:	81 f0       	breq	.+32     	; 0x197a <__fixunssfsi+0x46>
    195a:	9f d0       	rcall	.+318    	; 0x1a9a <__fp_zero>
    195c:	b1 e0       	ldi	r27, 0x01	; 1
    195e:	08 95       	ret
    1960:	9c c0       	rjmp	.+312    	; 0x1a9a <__fp_zero>
    1962:	67 2f       	mov	r22, r23
    1964:	78 2f       	mov	r23, r24
    1966:	88 27       	eor	r24, r24
    1968:	b8 5f       	subi	r27, 0xF8	; 248
    196a:	39 f0       	breq	.+14     	; 0x197a <__fixunssfsi+0x46>
    196c:	b9 3f       	cpi	r27, 0xF9	; 249
    196e:	cc f3       	brlt	.-14     	; 0x1962 <__fixunssfsi+0x2e>
    1970:	86 95       	lsr	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b3 95       	inc	r27
    1978:	d9 f7       	brne	.-10     	; 0x1970 <__fixunssfsi+0x3c>
    197a:	3e f4       	brtc	.+14     	; 0x198a <__fixunssfsi+0x56>
    197c:	90 95       	com	r25
    197e:	80 95       	com	r24
    1980:	70 95       	com	r23
    1982:	61 95       	neg	r22
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	08 95       	ret

0000198c <__floatunsisf>:
    198c:	e8 94       	clt
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <__floatsisf+0x12>

00001990 <__floatsisf>:
    1990:	97 fb       	bst	r25, 7
    1992:	3e f4       	brtc	.+14     	; 0x19a2 <__floatsisf+0x12>
    1994:	90 95       	com	r25
    1996:	80 95       	com	r24
    1998:	70 95       	com	r23
    199a:	61 95       	neg	r22
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	99 23       	and	r25, r25
    19a4:	a9 f0       	breq	.+42     	; 0x19d0 <__floatsisf+0x40>
    19a6:	f9 2f       	mov	r31, r25
    19a8:	96 e9       	ldi	r25, 0x96	; 150
    19aa:	bb 27       	eor	r27, r27
    19ac:	93 95       	inc	r25
    19ae:	f6 95       	lsr	r31
    19b0:	87 95       	ror	r24
    19b2:	77 95       	ror	r23
    19b4:	67 95       	ror	r22
    19b6:	b7 95       	ror	r27
    19b8:	f1 11       	cpse	r31, r1
    19ba:	f8 cf       	rjmp	.-16     	; 0x19ac <__floatsisf+0x1c>
    19bc:	fa f4       	brpl	.+62     	; 0x19fc <__floatsisf+0x6c>
    19be:	bb 0f       	add	r27, r27
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__floatsisf+0x36>
    19c2:	60 ff       	sbrs	r22, 0
    19c4:	1b c0       	rjmp	.+54     	; 0x19fc <__floatsisf+0x6c>
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <__floatsisf+0x6c>
    19d0:	88 23       	and	r24, r24
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <__floatsisf+0x48>
    19d4:	96 e9       	ldi	r25, 0x96	; 150
    19d6:	11 c0       	rjmp	.+34     	; 0x19fa <__floatsisf+0x6a>
    19d8:	77 23       	and	r23, r23
    19da:	21 f0       	breq	.+8      	; 0x19e4 <__floatsisf+0x54>
    19dc:	9e e8       	ldi	r25, 0x8E	; 142
    19de:	87 2f       	mov	r24, r23
    19e0:	76 2f       	mov	r23, r22
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <__floatsisf+0x5e>
    19e4:	66 23       	and	r22, r22
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <__floatsisf+0x74>
    19e8:	96 e8       	ldi	r25, 0x86	; 134
    19ea:	86 2f       	mov	r24, r22
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	2a f0       	brmi	.+10     	; 0x19fc <__floatsisf+0x6c>
    19f2:	9a 95       	dec	r25
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	da f7       	brpl	.-10     	; 0x19f2 <__floatsisf+0x62>
    19fc:	88 0f       	add	r24, r24
    19fe:	96 95       	lsr	r25
    1a00:	87 95       	ror	r24
    1a02:	97 f9       	bld	r25, 7
    1a04:	08 95       	ret

00001a06 <__fp_inf>:
    1a06:	97 f9       	bld	r25, 7
    1a08:	9f 67       	ori	r25, 0x7F	; 127
    1a0a:	80 e8       	ldi	r24, 0x80	; 128
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	08 95       	ret

00001a12 <__fp_nan>:
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	80 ec       	ldi	r24, 0xC0	; 192
    1a16:	08 95       	ret

00001a18 <__fp_pscA>:
    1a18:	00 24       	eor	r0, r0
    1a1a:	0a 94       	dec	r0
    1a1c:	16 16       	cp	r1, r22
    1a1e:	17 06       	cpc	r1, r23
    1a20:	18 06       	cpc	r1, r24
    1a22:	09 06       	cpc	r0, r25
    1a24:	08 95       	ret

00001a26 <__fp_pscB>:
    1a26:	00 24       	eor	r0, r0
    1a28:	0a 94       	dec	r0
    1a2a:	12 16       	cp	r1, r18
    1a2c:	13 06       	cpc	r1, r19
    1a2e:	14 06       	cpc	r1, r20
    1a30:	05 06       	cpc	r0, r21
    1a32:	08 95       	ret

00001a34 <__fp_round>:
    1a34:	09 2e       	mov	r0, r25
    1a36:	03 94       	inc	r0
    1a38:	00 0c       	add	r0, r0
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <__fp_round+0xc>
    1a3c:	88 23       	and	r24, r24
    1a3e:	52 f0       	brmi	.+20     	; 0x1a54 <__fp_round+0x20>
    1a40:	bb 0f       	add	r27, r27
    1a42:	40 f4       	brcc	.+16     	; 0x1a54 <__fp_round+0x20>
    1a44:	bf 2b       	or	r27, r31
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <__fp_round+0x18>
    1a48:	60 ff       	sbrs	r22, 0
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__fp_round+0x20>
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	08 95       	ret

00001a56 <__fp_split3>:
    1a56:	57 fd       	sbrc	r21, 7
    1a58:	90 58       	subi	r25, 0x80	; 128
    1a5a:	44 0f       	add	r20, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	59 f0       	breq	.+22     	; 0x1a76 <__fp_splitA+0x10>
    1a60:	5f 3f       	cpi	r21, 0xFF	; 255
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <__fp_splitA+0x1a>
    1a64:	47 95       	ror	r20

00001a66 <__fp_splitA>:
    1a66:	88 0f       	add	r24, r24
    1a68:	97 fb       	bst	r25, 7
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <__fp_splitA+0x20>
    1a6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a70:	79 f0       	breq	.+30     	; 0x1a90 <__fp_splitA+0x2a>
    1a72:	87 95       	ror	r24
    1a74:	08 95       	ret
    1a76:	12 16       	cp	r1, r18
    1a78:	13 06       	cpc	r1, r19
    1a7a:	14 06       	cpc	r1, r20
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	f2 cf       	rjmp	.-28     	; 0x1a64 <__fp_split3+0xe>
    1a80:	46 95       	lsr	r20
    1a82:	f1 df       	rcall	.-30     	; 0x1a66 <__fp_splitA>
    1a84:	08 c0       	rjmp	.+16     	; 0x1a96 <__fp_splitA+0x30>
    1a86:	16 16       	cp	r1, r22
    1a88:	17 06       	cpc	r1, r23
    1a8a:	18 06       	cpc	r1, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	f1 cf       	rjmp	.-30     	; 0x1a72 <__fp_splitA+0xc>
    1a90:	86 95       	lsr	r24
    1a92:	71 05       	cpc	r23, r1
    1a94:	61 05       	cpc	r22, r1
    1a96:	08 94       	sec
    1a98:	08 95       	ret

00001a9a <__fp_zero>:
    1a9a:	e8 94       	clt

00001a9c <__fp_szero>:
    1a9c:	bb 27       	eor	r27, r27
    1a9e:	66 27       	eor	r22, r22
    1aa0:	77 27       	eor	r23, r23
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	97 f9       	bld	r25, 7
    1aa6:	08 95       	ret

00001aa8 <__gesf2>:
    1aa8:	e3 d0       	rcall	.+454    	; 0x1c70 <__fp_cmp>
    1aaa:	08 f4       	brcc	.+2      	; 0x1aae <__gesf2+0x6>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	08 95       	ret

00001ab0 <__mulsf3>:
    1ab0:	0b d0       	rcall	.+22     	; 0x1ac8 <__mulsf3x>
    1ab2:	c0 cf       	rjmp	.-128    	; 0x1a34 <__fp_round>
    1ab4:	b1 df       	rcall	.-158    	; 0x1a18 <__fp_pscA>
    1ab6:	28 f0       	brcs	.+10     	; 0x1ac2 <__mulsf3+0x12>
    1ab8:	b6 df       	rcall	.-148    	; 0x1a26 <__fp_pscB>
    1aba:	18 f0       	brcs	.+6      	; 0x1ac2 <__mulsf3+0x12>
    1abc:	95 23       	and	r25, r21
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <__mulsf3+0x12>
    1ac0:	a2 cf       	rjmp	.-188    	; 0x1a06 <__fp_inf>
    1ac2:	a7 cf       	rjmp	.-178    	; 0x1a12 <__fp_nan>
    1ac4:	11 24       	eor	r1, r1
    1ac6:	ea cf       	rjmp	.-44     	; 0x1a9c <__fp_szero>

00001ac8 <__mulsf3x>:
    1ac8:	c6 df       	rcall	.-116    	; 0x1a56 <__fp_split3>
    1aca:	a0 f3       	brcs	.-24     	; 0x1ab4 <__mulsf3+0x4>

00001acc <__mulsf3_pse>:
    1acc:	95 9f       	mul	r25, r21
    1ace:	d1 f3       	breq	.-12     	; 0x1ac4 <__mulsf3+0x14>
    1ad0:	95 0f       	add	r25, r21
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	62 9f       	mul	r22, r18
    1ad8:	f0 01       	movw	r30, r0
    1ada:	72 9f       	mul	r23, r18
    1adc:	bb 27       	eor	r27, r27
    1ade:	f0 0d       	add	r31, r0
    1ae0:	b1 1d       	adc	r27, r1
    1ae2:	63 9f       	mul	r22, r19
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	f0 0d       	add	r31, r0
    1ae8:	b1 1d       	adc	r27, r1
    1aea:	aa 1f       	adc	r26, r26
    1aec:	64 9f       	mul	r22, r20
    1aee:	66 27       	eor	r22, r22
    1af0:	b0 0d       	add	r27, r0
    1af2:	a1 1d       	adc	r26, r1
    1af4:	66 1f       	adc	r22, r22
    1af6:	82 9f       	mul	r24, r18
    1af8:	22 27       	eor	r18, r18
    1afa:	b0 0d       	add	r27, r0
    1afc:	a1 1d       	adc	r26, r1
    1afe:	62 1f       	adc	r22, r18
    1b00:	73 9f       	mul	r23, r19
    1b02:	b0 0d       	add	r27, r0
    1b04:	a1 1d       	adc	r26, r1
    1b06:	62 1f       	adc	r22, r18
    1b08:	83 9f       	mul	r24, r19
    1b0a:	a0 0d       	add	r26, r0
    1b0c:	61 1d       	adc	r22, r1
    1b0e:	22 1f       	adc	r18, r18
    1b10:	74 9f       	mul	r23, r20
    1b12:	33 27       	eor	r19, r19
    1b14:	a0 0d       	add	r26, r0
    1b16:	61 1d       	adc	r22, r1
    1b18:	23 1f       	adc	r18, r19
    1b1a:	84 9f       	mul	r24, r20
    1b1c:	60 0d       	add	r22, r0
    1b1e:	21 1d       	adc	r18, r1
    1b20:	82 2f       	mov	r24, r18
    1b22:	76 2f       	mov	r23, r22
    1b24:	6a 2f       	mov	r22, r26
    1b26:	11 24       	eor	r1, r1
    1b28:	9f 57       	subi	r25, 0x7F	; 127
    1b2a:	50 40       	sbci	r21, 0x00	; 0
    1b2c:	8a f0       	brmi	.+34     	; 0x1b50 <__mulsf3_pse+0x84>
    1b2e:	e1 f0       	breq	.+56     	; 0x1b68 <__mulsf3_pse+0x9c>
    1b30:	88 23       	and	r24, r24
    1b32:	4a f0       	brmi	.+18     	; 0x1b46 <__mulsf3_pse+0x7a>
    1b34:	ee 0f       	add	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	66 1f       	adc	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	a9 f7       	brne	.-22     	; 0x1b30 <__mulsf3_pse+0x64>
    1b46:	9e 3f       	cpi	r25, 0xFE	; 254
    1b48:	51 05       	cpc	r21, r1
    1b4a:	70 f0       	brcs	.+28     	; 0x1b68 <__mulsf3_pse+0x9c>
    1b4c:	5c cf       	rjmp	.-328    	; 0x1a06 <__fp_inf>
    1b4e:	a6 cf       	rjmp	.-180    	; 0x1a9c <__fp_szero>
    1b50:	5f 3f       	cpi	r21, 0xFF	; 255
    1b52:	ec f3       	brlt	.-6      	; 0x1b4e <__mulsf3_pse+0x82>
    1b54:	98 3e       	cpi	r25, 0xE8	; 232
    1b56:	dc f3       	brlt	.-10     	; 0x1b4e <__mulsf3_pse+0x82>
    1b58:	86 95       	lsr	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	b7 95       	ror	r27
    1b60:	f7 95       	ror	r31
    1b62:	e7 95       	ror	r30
    1b64:	9f 5f       	subi	r25, 0xFF	; 255
    1b66:	c1 f7       	brne	.-16     	; 0x1b58 <__mulsf3_pse+0x8c>
    1b68:	fe 2b       	or	r31, r30
    1b6a:	88 0f       	add	r24, r24
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	96 95       	lsr	r25
    1b70:	87 95       	ror	r24
    1b72:	97 f9       	bld	r25, 7
    1b74:	08 95       	ret

00001b76 <pow>:
    1b76:	fa 01       	movw	r30, r20
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	30 96       	adiw	r30, 0x00	; 0
    1b7e:	21 05       	cpc	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	99 f1       	breq	.+102    	; 0x1bea <pow+0x74>
    1b84:	61 15       	cp	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	61 f4       	brne	.+24     	; 0x1ba2 <pow+0x2c>
    1b8a:	80 38       	cpi	r24, 0x80	; 128
    1b8c:	bf e3       	ldi	r27, 0x3F	; 63
    1b8e:	9b 07       	cpc	r25, r27
    1b90:	49 f1       	breq	.+82     	; 0x1be4 <pow+0x6e>
    1b92:	68 94       	set
    1b94:	90 38       	cpi	r25, 0x80	; 128
    1b96:	81 05       	cpc	r24, r1
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <pow+0x3c>
    1b9a:	80 38       	cpi	r24, 0x80	; 128
    1b9c:	bf ef       	ldi	r27, 0xFF	; 255
    1b9e:	9b 07       	cpc	r25, r27
    1ba0:	41 f0       	breq	.+16     	; 0x1bb2 <pow+0x3c>
    1ba2:	99 23       	and	r25, r25
    1ba4:	42 f5       	brpl	.+80     	; 0x1bf6 <pow+0x80>
    1ba6:	ff 3f       	cpi	r31, 0xFF	; 255
    1ba8:	e1 05       	cpc	r30, r1
    1baa:	31 05       	cpc	r19, r1
    1bac:	21 05       	cpc	r18, r1
    1bae:	11 f1       	breq	.+68     	; 0x1bf4 <pow+0x7e>
    1bb0:	e8 94       	clt
    1bb2:	08 94       	sec
    1bb4:	e7 95       	ror	r30
    1bb6:	d9 01       	movw	r26, r18
    1bb8:	aa 23       	and	r26, r26
    1bba:	29 f4       	brne	.+10     	; 0x1bc6 <pow+0x50>
    1bbc:	ab 2f       	mov	r26, r27
    1bbe:	be 2f       	mov	r27, r30
    1bc0:	f8 5f       	subi	r31, 0xF8	; 248
    1bc2:	d0 f3       	brcs	.-12     	; 0x1bb8 <pow+0x42>
    1bc4:	10 c0       	rjmp	.+32     	; 0x1be6 <pow+0x70>
    1bc6:	ff 5f       	subi	r31, 0xFF	; 255
    1bc8:	70 f4       	brcc	.+28     	; 0x1be6 <pow+0x70>
    1bca:	a6 95       	lsr	r26
    1bcc:	e0 f7       	brcc	.-8      	; 0x1bc6 <pow+0x50>
    1bce:	f7 39       	cpi	r31, 0x97	; 151
    1bd0:	50 f0       	brcs	.+20     	; 0x1be6 <pow+0x70>
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <pow+0x64>
    1bd4:	ff 3a       	cpi	r31, 0xAF	; 175
    1bd6:	38 f4       	brcc	.+14     	; 0x1be6 <pow+0x70>
    1bd8:	9f 77       	andi	r25, 0x7F	; 127
    1bda:	9f 93       	push	r25
    1bdc:	0c d0       	rcall	.+24     	; 0x1bf6 <pow+0x80>
    1bde:	0f 90       	pop	r0
    1be0:	07 fc       	sbrc	r0, 7
    1be2:	90 58       	subi	r25, 0x80	; 128
    1be4:	08 95       	ret
    1be6:	3e f0       	brts	.+14     	; 0x1bf6 <pow+0x80>
    1be8:	14 cf       	rjmp	.-472    	; 0x1a12 <__fp_nan>
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	80 e8       	ldi	r24, 0x80	; 128
    1bf0:	9f e3       	ldi	r25, 0x3F	; 63
    1bf2:	08 95       	ret
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	9f 77       	andi	r25, 0x7F	; 127
    1bf8:	5f 93       	push	r21
    1bfa:	4f 93       	push	r20
    1bfc:	3f 93       	push	r19
    1bfe:	2f 93       	push	r18
    1c00:	c2 d0       	rcall	.+388    	; 0x1d86 <log>
    1c02:	2f 91       	pop	r18
    1c04:	3f 91       	pop	r19
    1c06:	4f 91       	pop	r20
    1c08:	5f 91       	pop	r21
    1c0a:	52 df       	rcall	.-348    	; 0x1ab0 <__mulsf3>
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <exp>
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <pow+0xa0>
    1c10:	0e f0       	brts	.+2      	; 0x1c14 <pow+0x9e>
    1c12:	f9 ce       	rjmp	.-526    	; 0x1a06 <__fp_inf>
    1c14:	42 cf       	rjmp	.-380    	; 0x1a9a <__fp_zero>
    1c16:	fd ce       	rjmp	.-518    	; 0x1a12 <__fp_nan>

00001c18 <exp>:
    1c18:	26 df       	rcall	.-436    	; 0x1a66 <__fp_splitA>
    1c1a:	c8 f3       	brcs	.-14     	; 0x1c0e <pow+0x98>
    1c1c:	96 38       	cpi	r25, 0x86	; 134
    1c1e:	c0 f7       	brcc	.-16     	; 0x1c10 <pow+0x9a>
    1c20:	07 f8       	bld	r0, 7
    1c22:	0f 92       	push	r0
    1c24:	e8 94       	clt
    1c26:	2b e3       	ldi	r18, 0x3B	; 59
    1c28:	3a ea       	ldi	r19, 0xAA	; 170
    1c2a:	48 eb       	ldi	r20, 0xB8	; 184
    1c2c:	5f e7       	ldi	r21, 0x7F	; 127
    1c2e:	4e df       	rcall	.-356    	; 0x1acc <__mulsf3_pse>
    1c30:	0f 92       	push	r0
    1c32:	0f 92       	push	r0
    1c34:	0f 92       	push	r0
    1c36:	4d b7       	in	r20, 0x3d	; 61
    1c38:	5e b7       	in	r21, 0x3e	; 62
    1c3a:	0f 92       	push	r0
    1c3c:	e4 d0       	rcall	.+456    	; 0x1e06 <modf>
    1c3e:	e4 e5       	ldi	r30, 0x54	; 84
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	3a d0       	rcall	.+116    	; 0x1cb8 <__fp_powser>
    1c44:	4f 91       	pop	r20
    1c46:	5f 91       	pop	r21
    1c48:	ef 91       	pop	r30
    1c4a:	ff 91       	pop	r31
    1c4c:	e5 95       	asr	r30
    1c4e:	ee 1f       	adc	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	49 f0       	breq	.+18     	; 0x1c66 <exp+0x4e>
    1c54:	fe 57       	subi	r31, 0x7E	; 126
    1c56:	e0 68       	ori	r30, 0x80	; 128
    1c58:	44 27       	eor	r20, r20
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	44 1f       	adc	r20, r20
    1c5e:	fa 95       	dec	r31
    1c60:	e1 f7       	brne	.-8      	; 0x1c5a <exp+0x42>
    1c62:	41 95       	neg	r20
    1c64:	55 0b       	sbc	r21, r21
    1c66:	56 d0       	rcall	.+172    	; 0x1d14 <ldexp>
    1c68:	0f 90       	pop	r0
    1c6a:	07 fe       	sbrs	r0, 7
    1c6c:	4a c0       	rjmp	.+148    	; 0x1d02 <inverse>
    1c6e:	08 95       	ret

00001c70 <__fp_cmp>:
    1c70:	99 0f       	add	r25, r25
    1c72:	00 08       	sbc	r0, r0
    1c74:	55 0f       	add	r21, r21
    1c76:	aa 0b       	sbc	r26, r26
    1c78:	e0 e8       	ldi	r30, 0x80	; 128
    1c7a:	fe ef       	ldi	r31, 0xFE	; 254
    1c7c:	16 16       	cp	r1, r22
    1c7e:	17 06       	cpc	r1, r23
    1c80:	e8 07       	cpc	r30, r24
    1c82:	f9 07       	cpc	r31, r25
    1c84:	c0 f0       	brcs	.+48     	; 0x1cb6 <__fp_cmp+0x46>
    1c86:	12 16       	cp	r1, r18
    1c88:	13 06       	cpc	r1, r19
    1c8a:	e4 07       	cpc	r30, r20
    1c8c:	f5 07       	cpc	r31, r21
    1c8e:	98 f0       	brcs	.+38     	; 0x1cb6 <__fp_cmp+0x46>
    1c90:	62 1b       	sub	r22, r18
    1c92:	73 0b       	sbc	r23, r19
    1c94:	84 0b       	sbc	r24, r20
    1c96:	95 0b       	sbc	r25, r21
    1c98:	39 f4       	brne	.+14     	; 0x1ca8 <__fp_cmp+0x38>
    1c9a:	0a 26       	eor	r0, r26
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <__fp_cmp+0x46>
    1c9e:	23 2b       	or	r18, r19
    1ca0:	24 2b       	or	r18, r20
    1ca2:	25 2b       	or	r18, r21
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <__fp_cmp+0x3e>
    1ca6:	08 95       	ret
    1ca8:	0a 26       	eor	r0, r26
    1caa:	09 f4       	brne	.+2      	; 0x1cae <__fp_cmp+0x3e>
    1cac:	a1 40       	sbci	r26, 0x01	; 1
    1cae:	a6 95       	lsr	r26
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	81 1d       	adc	r24, r1
    1cb4:	81 1d       	adc	r24, r1
    1cb6:	08 95       	ret

00001cb8 <__fp_powser>:
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	1f 93       	push	r17
    1cbe:	0f 93       	push	r16
    1cc0:	ff 92       	push	r15
    1cc2:	ef 92       	push	r14
    1cc4:	df 92       	push	r13
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	8c 01       	movw	r16, r24
    1cca:	68 94       	set
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <__fp_powser+0x20>
    1cce:	da 2e       	mov	r13, r26
    1cd0:	ef 01       	movw	r28, r30
    1cd2:	fa de       	rcall	.-524    	; 0x1ac8 <__mulsf3x>
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e8 94       	clt
    1cd8:	a5 91       	lpm	r26, Z+
    1cda:	25 91       	lpm	r18, Z+
    1cdc:	35 91       	lpm	r19, Z+
    1cde:	45 91       	lpm	r20, Z+
    1ce0:	55 91       	lpm	r21, Z+
    1ce2:	ae f3       	brts	.-22     	; 0x1cce <__fp_powser+0x16>
    1ce4:	ef 01       	movw	r28, r30
    1ce6:	6b dd       	rcall	.-1322   	; 0x17be <__addsf3x>
    1ce8:	fe 01       	movw	r30, r28
    1cea:	97 01       	movw	r18, r14
    1cec:	a8 01       	movw	r20, r16
    1cee:	da 94       	dec	r13
    1cf0:	79 f7       	brne	.-34     	; 0x1cd0 <__fp_powser+0x18>
    1cf2:	df 90       	pop	r13
    1cf4:	ef 90       	pop	r14
    1cf6:	ff 90       	pop	r15
    1cf8:	0f 91       	pop	r16
    1cfa:	1f 91       	pop	r17
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <inverse>:
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e8       	ldi	r24, 0x80	; 128
    1d0c:	9f e3       	ldi	r25, 0x3F	; 63
    1d0e:	aa cd       	rjmp	.-1196   	; 0x1864 <__divsf3>
    1d10:	7a ce       	rjmp	.-780    	; 0x1a06 <__fp_inf>
    1d12:	ac c0       	rjmp	.+344    	; 0x1e6c <__fp_mpack>

00001d14 <ldexp>:
    1d14:	a8 de       	rcall	.-688    	; 0x1a66 <__fp_splitA>
    1d16:	e8 f3       	brcs	.-6      	; 0x1d12 <inverse+0x10>
    1d18:	99 23       	and	r25, r25
    1d1a:	d9 f3       	breq	.-10     	; 0x1d12 <inverse+0x10>
    1d1c:	94 0f       	add	r25, r20
    1d1e:	51 1d       	adc	r21, r1
    1d20:	bb f3       	brvs	.-18     	; 0x1d10 <inverse+0xe>
    1d22:	91 50       	subi	r25, 0x01	; 1
    1d24:	50 40       	sbci	r21, 0x00	; 0
    1d26:	94 f0       	brlt	.+36     	; 0x1d4c <ldexp+0x38>
    1d28:	59 f0       	breq	.+22     	; 0x1d40 <ldexp+0x2c>
    1d2a:	88 23       	and	r24, r24
    1d2c:	32 f0       	brmi	.+12     	; 0x1d3a <ldexp+0x26>
    1d2e:	66 0f       	add	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	91 50       	subi	r25, 0x01	; 1
    1d36:	50 40       	sbci	r21, 0x00	; 0
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <ldexp+0x16>
    1d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3c:	51 05       	cpc	r21, r1
    1d3e:	44 f7       	brge	.-48     	; 0x1d10 <inverse+0xe>
    1d40:	88 0f       	add	r24, r24
    1d42:	91 1d       	adc	r25, r1
    1d44:	96 95       	lsr	r25
    1d46:	87 95       	ror	r24
    1d48:	97 f9       	bld	r25, 7
    1d4a:	08 95       	ret
    1d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4e:	ac f0       	brlt	.+42     	; 0x1d7a <ldexp+0x66>
    1d50:	98 3e       	cpi	r25, 0xE8	; 232
    1d52:	9c f0       	brlt	.+38     	; 0x1d7a <ldexp+0x66>
    1d54:	bb 27       	eor	r27, r27
    1d56:	86 95       	lsr	r24
    1d58:	77 95       	ror	r23
    1d5a:	67 95       	ror	r22
    1d5c:	b7 95       	ror	r27
    1d5e:	08 f4       	brcc	.+2      	; 0x1d62 <ldexp+0x4e>
    1d60:	b1 60       	ori	r27, 0x01	; 1
    1d62:	93 95       	inc	r25
    1d64:	c1 f7       	brne	.-16     	; 0x1d56 <ldexp+0x42>
    1d66:	bb 0f       	add	r27, r27
    1d68:	58 f7       	brcc	.-42     	; 0x1d40 <ldexp+0x2c>
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <ldexp+0x5c>
    1d6c:	60 ff       	sbrs	r22, 0
    1d6e:	e8 cf       	rjmp	.-48     	; 0x1d40 <ldexp+0x2c>
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	e3 cf       	rjmp	.-58     	; 0x1d40 <ldexp+0x2c>
    1d7a:	90 ce       	rjmp	.-736    	; 0x1a9c <__fp_szero>
    1d7c:	0e f0       	brts	.+2      	; 0x1d80 <ldexp+0x6c>
    1d7e:	76 c0       	rjmp	.+236    	; 0x1e6c <__fp_mpack>
    1d80:	48 ce       	rjmp	.-880    	; 0x1a12 <__fp_nan>
    1d82:	68 94       	set
    1d84:	40 ce       	rjmp	.-896    	; 0x1a06 <__fp_inf>

00001d86 <log>:
    1d86:	6f de       	rcall	.-802    	; 0x1a66 <__fp_splitA>
    1d88:	c8 f3       	brcs	.-14     	; 0x1d7c <ldexp+0x68>
    1d8a:	99 23       	and	r25, r25
    1d8c:	d1 f3       	breq	.-12     	; 0x1d82 <ldexp+0x6e>
    1d8e:	c6 f3       	brts	.-16     	; 0x1d80 <ldexp+0x6c>
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	1f 93       	push	r17
    1d96:	0f 93       	push	r16
    1d98:	ff 92       	push	r15
    1d9a:	c9 2f       	mov	r28, r25
    1d9c:	dd 27       	eor	r29, r29
    1d9e:	88 23       	and	r24, r24
    1da0:	2a f0       	brmi	.+10     	; 0x1dac <log+0x26>
    1da2:	21 97       	sbiw	r28, 0x01	; 1
    1da4:	66 0f       	add	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	da f7       	brpl	.-10     	; 0x1da2 <log+0x1c>
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f eb       	ldi	r21, 0xBF	; 191
    1db4:	9f e3       	ldi	r25, 0x3F	; 63
    1db6:	88 39       	cpi	r24, 0x98	; 152
    1db8:	20 f0       	brcs	.+8      	; 0x1dc2 <log+0x3c>
    1dba:	80 3e       	cpi	r24, 0xE0	; 224
    1dbc:	30 f0       	brcs	.+12     	; 0x1dca <log+0x44>
    1dbe:	21 96       	adiw	r28, 0x01	; 1
    1dc0:	8f 77       	andi	r24, 0x7F	; 127
    1dc2:	ec dc       	rcall	.-1576   	; 0x179c <__addsf3>
    1dc4:	ec e7       	ldi	r30, 0x7C	; 124
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <log+0x4a>
    1dca:	e8 dc       	rcall	.-1584   	; 0x179c <__addsf3>
    1dcc:	e9 ea       	ldi	r30, 0xA9	; 169
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	73 df       	rcall	.-282    	; 0x1cb8 <__fp_powser>
    1dd2:	8b 01       	movw	r16, r22
    1dd4:	be 01       	movw	r22, r28
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	fb 2e       	mov	r15, r27
    1dda:	6f 57       	subi	r22, 0x7F	; 127
    1ddc:	71 09       	sbc	r23, r1
    1dde:	75 95       	asr	r23
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 0b       	sbc	r24, r24
    1de4:	99 0b       	sbc	r25, r25
    1de6:	d4 dd       	rcall	.-1112   	; 0x1990 <__floatsisf>
    1de8:	28 e1       	ldi	r18, 0x18	; 24
    1dea:	32 e7       	ldi	r19, 0x72	; 114
    1dec:	41 e3       	ldi	r20, 0x31	; 49
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	6b de       	rcall	.-810    	; 0x1ac8 <__mulsf3x>
    1df2:	af 2d       	mov	r26, r15
    1df4:	98 01       	movw	r18, r16
    1df6:	ae 01       	movw	r20, r28
    1df8:	ff 90       	pop	r15
    1dfa:	0f 91       	pop	r16
    1dfc:	1f 91       	pop	r17
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	dd dc       	rcall	.-1606   	; 0x17be <__addsf3x>
    1e04:	17 ce       	rjmp	.-978    	; 0x1a34 <__fp_round>

00001e06 <modf>:
    1e06:	fa 01       	movw	r30, r20
    1e08:	dc 01       	movw	r26, r24
    1e0a:	aa 0f       	add	r26, r26
    1e0c:	bb 1f       	adc	r27, r27
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	bf 57       	subi	r27, 0x7F	; 127
    1e14:	28 f4       	brcc	.+10     	; 0x1e20 <modf+0x1a>
    1e16:	22 27       	eor	r18, r18
    1e18:	33 27       	eor	r19, r19
    1e1a:	44 27       	eor	r20, r20
    1e1c:	50 78       	andi	r21, 0x80	; 128
    1e1e:	1f c0       	rjmp	.+62     	; 0x1e5e <modf+0x58>
    1e20:	b7 51       	subi	r27, 0x17	; 23
    1e22:	88 f4       	brcc	.+34     	; 0x1e46 <modf+0x40>
    1e24:	ab 2f       	mov	r26, r27
    1e26:	00 24       	eor	r0, r0
    1e28:	46 95       	lsr	r20
    1e2a:	37 95       	ror	r19
    1e2c:	27 95       	ror	r18
    1e2e:	01 1c       	adc	r0, r1
    1e30:	a3 95       	inc	r26
    1e32:	d2 f3       	brmi	.-12     	; 0x1e28 <modf+0x22>
    1e34:	00 20       	and	r0, r0
    1e36:	69 f0       	breq	.+26     	; 0x1e52 <modf+0x4c>
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	44 1f       	adc	r20, r20
    1e3e:	b3 95       	inc	r27
    1e40:	da f3       	brmi	.-10     	; 0x1e38 <modf+0x32>
    1e42:	0d d0       	rcall	.+26     	; 0x1e5e <modf+0x58>
    1e44:	aa cc       	rjmp	.-1708   	; 0x179a <__subsf3>
    1e46:	61 30       	cpi	r22, 0x01	; 1
    1e48:	71 05       	cpc	r23, r1
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	8a 07       	cpc	r24, r26
    1e4e:	b9 46       	sbci	r27, 0x69	; 105
    1e50:	30 f4       	brcc	.+12     	; 0x1e5e <modf+0x58>
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	66 27       	eor	r22, r22
    1e58:	77 27       	eor	r23, r23
    1e5a:	88 27       	eor	r24, r24
    1e5c:	90 78       	andi	r25, 0x80	; 128
    1e5e:	30 96       	adiw	r30, 0x00	; 0
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <modf+0x64>
    1e62:	20 83       	st	Z, r18
    1e64:	31 83       	std	Z+1, r19	; 0x01
    1e66:	42 83       	std	Z+2, r20	; 0x02
    1e68:	53 83       	std	Z+3, r21	; 0x03
    1e6a:	08 95       	ret

00001e6c <__fp_mpack>:
    1e6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e6e:	31 f0       	breq	.+12     	; 0x1e7c <__fp_mpack_finite+0xc>

00001e70 <__fp_mpack_finite>:
    1e70:	91 50       	subi	r25, 0x01	; 1
    1e72:	20 f4       	brcc	.+8      	; 0x1e7c <__fp_mpack_finite+0xc>
    1e74:	87 95       	ror	r24
    1e76:	77 95       	ror	r23
    1e78:	67 95       	ror	r22
    1e7a:	b7 95       	ror	r27
    1e7c:	88 0f       	add	r24, r24
    1e7e:	91 1d       	adc	r25, r1
    1e80:	96 95       	lsr	r25
    1e82:	87 95       	ror	r24
    1e84:	97 f9       	bld	r25, 7
    1e86:	08 95       	ret

00001e88 <__udivmodsi4>:
    1e88:	a1 e2       	ldi	r26, 0x21	; 33
    1e8a:	1a 2e       	mov	r1, r26
    1e8c:	aa 1b       	sub	r26, r26
    1e8e:	bb 1b       	sub	r27, r27
    1e90:	fd 01       	movw	r30, r26
    1e92:	0d c0       	rjmp	.+26     	; 0x1eae <__udivmodsi4_ep>

00001e94 <__udivmodsi4_loop>:
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	ee 1f       	adc	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	a2 17       	cp	r26, r18
    1e9e:	b3 07       	cpc	r27, r19
    1ea0:	e4 07       	cpc	r30, r20
    1ea2:	f5 07       	cpc	r31, r21
    1ea4:	20 f0       	brcs	.+8      	; 0x1eae <__udivmodsi4_ep>
    1ea6:	a2 1b       	sub	r26, r18
    1ea8:	b3 0b       	sbc	r27, r19
    1eaa:	e4 0b       	sbc	r30, r20
    1eac:	f5 0b       	sbc	r31, r21

00001eae <__udivmodsi4_ep>:
    1eae:	66 1f       	adc	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	1a 94       	dec	r1
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <__udivmodsi4_loop>
    1eba:	60 95       	com	r22
    1ebc:	70 95       	com	r23
    1ebe:	80 95       	com	r24
    1ec0:	90 95       	com	r25
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	bd 01       	movw	r22, r26
    1ec8:	cf 01       	movw	r24, r30
    1eca:	08 95       	ret

00001ecc <_exit>:
    1ecc:	f8 94       	cli

00001ece <__stop_program>:
    1ece:	ff cf       	rjmp	.-2      	; 0x1ece <__stop_program>
